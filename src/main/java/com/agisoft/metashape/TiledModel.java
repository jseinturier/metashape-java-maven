/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape;

/**
 * Tiled model.
 */
public class TiledModel {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public TiledModel(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(TiledModel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MetashapeJNI.delete_TiledModel(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static long[] cArrayUnwrap(TiledModel[] arrayWrapper) {
    long[] cArray = new long[arrayWrapper.length];
    for (int i=0; i<arrayWrapper.length; i++)
      cArray[i] = TiledModel.getCPtr(arrayWrapper[i]);
    return cArray;
  }

  public static TiledModel[] cArrayWrap(long[] cArray, boolean cMemoryOwn) {
    TiledModel[] arrayWrapper = new TiledModel[cArray.length];
    for (int i=0; i<cArray.length; i++)
      arrayWrapper[i] = new TiledModel(cArray[i], cMemoryOwn);
    return arrayWrapper;
  }

  public TiledModel() {
    this(MetashapeJNI.new_TiledModel__SWIG_0(), true);
  }

  public TiledModel(TiledModel tiled_model) {
    this(MetashapeJNI.new_TiledModel__SWIG_1(TiledModel.getCPtr(tiled_model), tiled_model), true);
  }

  /**
   *  Tiled model identifier.
   */
  public int getKey() {
    return MetashapeJNI.TiledModel_getKey(swigCPtr, this);
  }

  /**
   *  Chunk container.
   */
  public Chunk getChunk() {
    long ptr = MetashapeJNI.TiledModel_getChunk(swigCPtr, this);
    if (ptr == 0)
        return null;
    return new Chunk(ptr, true);
  }

  /**
   *  Tiled model label.
   */
  public void setLabel(String label) {
    MetashapeJNI.TiledModel_setLabel(swigCPtr, this, label);
  }

  /**
   *  Tiled model label.
   */
  public String getLabel() {
    return MetashapeJNI.TiledModel_getLabel(swigCPtr, this);
  }

  /**
   *  Path to tiled model file.
   */
  public String getPath() {
    return MetashapeJNI.TiledModel_getPath(swigCPtr, this);
  }

  /**
   *  Tiled model meta data.
   */
  public void setMeta(MetaData meta) {
    MetashapeJNI.TiledModel_setMeta(swigCPtr, this, MetaData.getCPtr(meta), meta);
  }

  /**
   *  Tiled model meta data.
   */
  public MetaData getMeta() {
    return new MetaData(MetashapeJNI.TiledModel_getMeta(swigCPtr, this), true);
  }

  /**
   * Returns ray intersection with the tiled model.<br>
   * @param origin Ray origin.<br>
   * @param target Point on the ray.<br>
   * @return Coordinates of the intersection point or null.
   */
  public Vector3d pickPoint(Vector3d origin, Vector3d target) {
    long ptr = MetashapeJNI.TiledModel_pickPoint(swigCPtr, this, Vector3d.getCPtr(origin), origin, Vector3d.getCPtr(target), target);
    if (ptr == 0)
        return null;
    return new Vector3d(ptr, true);
  }

  /**
   * Generate tiled model preview image.<br>
   * @param width Preview image width.<br>
   * @param height Preview image height.<br>
   * @param transform 4x4 viewpoint transformation matrix.<br>
   * @return Preview image.
   */
  public Image renderPreview(long width, long height, Matrix4x4d transform, Progress progress) {
    return new Image(MetashapeJNI.TiledModel_renderPreview(swigCPtr, this, width, height, Matrix4x4d.getCPtr(transform), transform, progress), true);
  }

}
