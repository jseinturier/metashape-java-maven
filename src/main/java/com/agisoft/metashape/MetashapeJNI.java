/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape;

import java.util.Map;

class MetashapeJNI {
  public final static native String getVersion();
  public final static native void setGpuMask(long jarg1);
  public final static native long getGpuMask();
  public final static native void setCpuEnabled(boolean jarg1);
  public final static native boolean isCpuEnabled();
  public final static native void setProjectCompression(int jarg1);
  public final static native int getProjectCompression();
  public final static native void setProjectAbsolutePaths(boolean jarg1);
  public final static native boolean getProjectAbsolutePaths();
  public final static native void setNetworkPath(String jarg1);
  public final static native String getNetworkPath();
  public final static native void releaseFreeMemory();
  public final static native boolean License_isValid();
  public final static native void License_activate(String jarg1);
  public final static native String License_activateOffline(String jarg1);
  public final static native void License_deactivate();
  public final static native String License_deactivateOffline();
  public final static native void delete_License(long jarg1);
  public final static native long new_Image__SWIG_0();
  public final static native long new_Image__SWIG_1(long jarg1, Image jarg1_);
  public final static native long new_Image__SWIG_2(long jarg1, long jarg2, String jarg3, int jarg4);
  public final static native boolean Image_isNull(long jarg1, Image jarg1_);
  public final static native long Image_copy(long jarg1, Image jarg1_);
  public final static native long Image_getWidth(long jarg1, Image jarg1_);
  public final static native long Image_getHeight(long jarg1, Image jarg1_);
  public final static native long Image_getChannelCount(long jarg1, Image jarg1_);
  public final static native String Image_getChannels(long jarg1, Image jarg1_);
  public final static native int Image_getDataType(long jarg1, Image jarg1_);
  public final static native void Image_resize(long jarg1, Image jarg1_, long jarg2, long jarg3);
  public final static native long Image_convert(long jarg1, Image jarg1_, String jarg2, int jarg3);
  public final static native boolean Image_save(long jarg1, Image jarg1_, String jarg2);
  public final static native boolean Image_load(long jarg1, Image jarg1_, String jarg2, int jarg3, int jarg4, String jarg5);
  public final static native void delete_Image(long jarg1);
  public final static native long new_CoordinateSystem__SWIG_0();
  public final static native long new_CoordinateSystem__SWIG_1(long jarg1, CoordinateSystem jarg1_);
  public final static native String CoordinateSystem_getAuthority(long jarg1, CoordinateSystem jarg1_);
  public final static native String CoordinateSystem_getWkt(long jarg1, CoordinateSystem jarg1_);
  public final static native String CoordinateSystem_getProj4(long jarg1, CoordinateSystem jarg1_);
  public final static native boolean CoordinateSystem_init(long jarg1, CoordinateSystem jarg1_, String jarg2);
  public final static native Vector CoordinateSystem_project(long jarg1, CoordinateSystem jarg1_, Vector jarg2);
  public final static native Vector CoordinateSystem_unproject(long jarg1, CoordinateSystem jarg1_, Vector jarg2);
  public final static native Matrix CoordinateSystem_localframe(long jarg1, CoordinateSystem jarg1_, Vector jarg2);
  public final static native long CoordinateSystem_makeGeographic(long jarg1, CoordinateSystem jarg1_);
  public final static native long CoordinateSystem_makeGeocentric(long jarg1, CoordinateSystem jarg1_);
  public final static native Matrix CoordinateSystem_datumTransform(long jarg1, CoordinateSystem jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native Vector CoordinateSystem_transform(Vector jarg1, long jarg2, CoordinateSystem jarg2_, long jarg3, CoordinateSystem jarg3_);
  public final static native Matrix CoordinateSystem_transformationMatrix(Vector jarg1, long jarg2, CoordinateSystem jarg2_, long jarg3, CoordinateSystem jarg3_);
  public final static native boolean CoordinateSystem_addGeoid(String jarg1);
  public final static native void delete_CoordinateSystem(long jarg1);
  public final static native long new_OrthoProjection__SWIG_0();
  public final static native long new_OrthoProjection__SWIG_1(long jarg1, OrthoProjection jarg1_);
  public final static native void OrthoProjection_setCoordinateSystem(long jarg1, OrthoProjection jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long OrthoProjection_getCoordinateSystem(long jarg1, OrthoProjection jarg1_);
  public final static native void OrthoProjection_setTransform(long jarg1, OrthoProjection jarg1_, Matrix jarg2);
  public final static native Matrix OrthoProjection_getTransform(long jarg1, OrthoProjection jarg1_);
  public final static native void OrthoProjection_setType(long jarg1, OrthoProjection jarg1_, int jarg2);
  public final static native int OrthoProjection_getType(long jarg1, OrthoProjection jarg1_);
  public final static native void OrthoProjection_setRadius(long jarg1, OrthoProjection jarg1_, double jarg2);
  public final static native double OrthoProjection_getRadius(long jarg1, OrthoProjection jarg1_);
  public final static native String OrthoProjection_getAuthority(long jarg1, OrthoProjection jarg1_);
  public final static native String OrthoProjection_getWkt(long jarg1, OrthoProjection jarg1_);
  public final static native String OrthoProjection_getProj4(long jarg1, OrthoProjection jarg1_);
  public final static native boolean OrthoProjection_init(long jarg1, OrthoProjection jarg1_, String jarg2);
  public final static native Vector OrthoProjection_project(long jarg1, OrthoProjection jarg1_, Vector jarg2);
  public final static native Vector OrthoProjection_unproject(long jarg1, OrthoProjection jarg1_, Vector jarg2);
  public final static native Matrix OrthoProjection_localframe(long jarg1, OrthoProjection jarg1_, Vector jarg2);
  public final static native Vector OrthoProjection_transform(Vector jarg1, long jarg2, OrthoProjection jarg2_, long jarg3, OrthoProjection jarg3_);
  public final static native void delete_OrthoProjection(long jarg1);
  public final static native long new_Palette__SWIG_0();
  public final static native long new_Palette__SWIG_1(long jarg1, Palette jarg1_);
  public final static native void Palette_init(long jarg1, Palette jarg1_, int jarg2);
  public final static native boolean Palette_load(long jarg1, Palette jarg1_, String jarg2);
  public final static native boolean Palette_save(long jarg1, Palette jarg1_, String jarg2);
  public final static native void Palette_resize(long jarg1, Palette jarg1_, long jarg2);
  public final static native long Palette_getSize(long jarg1, Palette jarg1_);
  public final static native void Palette_setValue(long jarg1, Palette jarg1_, long jarg2, float jarg3);
  public final static native float Palette_getValue(long jarg1, Palette jarg1_, long jarg2);
  public final static native void Palette_setColor(long jarg1, Palette jarg1_, long jarg2, Color jarg3);
  public final static native Color Palette_getColor(long jarg1, Palette jarg1_, long jarg2);
  public final static native void delete_Palette(long jarg1);
  public final static native long new_Calibration__SWIG_0();
  public final static native long new_Calibration__SWIG_1(long jarg1, Calibration jarg1_);
  public final static native void delete_Calibration(long jarg1);
  public final static native int Calibration_getType(long jarg1, Calibration jarg1_);
  public final static native long Calibration_getWidth(long jarg1, Calibration jarg1_);
  public final static native long Calibration_getHeight(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setType(long jarg1, Calibration jarg1_, int jarg2);
  public final static native void Calibration_setWidth(long jarg1, Calibration jarg1_, long jarg2);
  public final static native void Calibration_setHeight(long jarg1, Calibration jarg1_, long jarg2);
  public final static native void Calibration_setF(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getF(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setCx(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getCx(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setCy(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getCy(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setB1(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getB1(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setB2(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getB2(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setK1(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getK1(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setK2(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getK2(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setK3(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getK3(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setK4(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getK4(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setP1(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getP1(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setP2(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getP2(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setP3(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getP3(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setP4(long jarg1, Calibration jarg1_, double jarg2);
  public final static native double Calibration_getP4(long jarg1, Calibration jarg1_);
  public final static native void Calibration_setRPCModel(long jarg1, Calibration jarg1_, RPCModel jarg2);
  public final static native RPCModel Calibration_getRPCModel(long jarg1, Calibration jarg1_);
  public final static native void Calibration_save(long jarg1, Calibration jarg1_, String jarg2, int jarg3, String jarg4, Vector jarg5, double jarg6, double jarg7, double jarg8);
  public final static native void Calibration_load(long jarg1, Calibration jarg1_, String jarg2, int jarg3);
  public final static native Vector Calibration_project(long jarg1, Calibration jarg1_, Vector jarg2);
  public final static native Vector Calibration_unproject(long jarg1, Calibration jarg1_, Vector jarg2);
  public final static native Vector Calibration_getError(long jarg1, Calibration jarg1_, Vector jarg2, Vector jarg3);
  public final static native long new_RasterTransform__SWIG_0();
  public final static native long new_RasterTransform__SWIG_1(long jarg1, RasterTransform jarg1_);
  public final static native void RasterTransform_setEnabled(long jarg1, RasterTransform jarg1_, boolean jarg2);
  public final static native boolean RasterTransform_isEnabled(long jarg1, RasterTransform jarg1_);
  public final static native void RasterTransform_setFromulas(long jarg1, RasterTransform jarg1_, String[] jarg2);
  public final static native String[] RasterTransform_getFormulas(long jarg1, RasterTransform jarg1_);
  public final static native void RasterTransform_setMinValue(long jarg1, RasterTransform jarg1_, double jarg2);
  public final static native double RasterTransform_getMinValue(long jarg1, RasterTransform jarg1_);
  public final static native void RasterTransform_setMaxValue(long jarg1, RasterTransform jarg1_, double jarg2);
  public final static native double RasterTransform_getMaxValue(long jarg1, RasterTransform jarg1_);
  public final static native void RasterTransform_setInterpolated(long jarg1, RasterTransform jarg1_, boolean jarg2);
  public final static native boolean RasterTransform_isInterpolated(long jarg1, RasterTransform jarg1_);
  public final static native void RasterTransform_setPalette(long jarg1, RasterTransform jarg1_, long jarg2, Palette jarg2_);
  public final static native long RasterTransform_getPalette(long jarg1, RasterTransform jarg1_);
  public final static native void delete_RasterTransform(long jarg1);
  public final static native long new_Sensor(long jarg1, Sensor jarg1_);
  public final static native int Sensor_getKey(long jarg1, Sensor jarg1_);
  public final static native long Sensor_getChunk(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setLabel(long jarg1, Sensor jarg1_, String jarg2);
  public final static native String Sensor_getLabel(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setResolution(long jarg1, Sensor jarg1_, long jarg2, long jarg3);
  public final static native long Sensor_getWidth(long jarg1, Sensor jarg1_);
  public final static native long Sensor_getHeight(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setCameraModel(long jarg1, Sensor jarg1_, int jarg2);
  public final static native int Sensor_getCameraModel(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setCalibration(long jarg1, Sensor jarg1_, long jarg2, Calibration jarg2_);
  public final static native long Sensor_getCalibration(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setUserCalib(long jarg1, Sensor jarg1_, long jarg2);
  public final static native long Sensor_getUserCalib(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setFixed(long jarg1, Sensor jarg1_, boolean jarg2);
  public final static native boolean Sensor_isFixed(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setPixelSize(long jarg1, Sensor jarg1_, double jarg2, double jarg3);
  public final static native double Sensor_getPixelWidth(long jarg1, Sensor jarg1_);
  public final static native double Sensor_getPixelHeight(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setFocalLength(long jarg1, Sensor jarg1_, double jarg2);
  public final static native double Sensor_getFocalLength(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setMaster(long jarg1, Sensor jarg1_, long jarg2);
  public final static native long Sensor_getMaster(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setReference(long jarg1, Sensor jarg1_, Sensor.Reference jarg2);
  public final static native Sensor.Reference Sensor_getReference(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setAntenna(long jarg1, Sensor jarg1_, Antenna jarg2);
  public final static native Antenna Sensor_getAntenna(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setVignetting(long jarg1, Sensor jarg1_, Vignetting[] jarg2);
  public final static native Vignetting[] Sensor_getVignetting(long jarg1, Sensor jarg1_);
  public final static native void Sensor_setMeta(long jarg1, Sensor jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Sensor_getMeta(long jarg1, Sensor jarg1_);
  public final static native void Sensor_makeMaster(long jarg1, Sensor jarg1_);
  public final static native void delete_Sensor(long jarg1);
  public final static native long new_CameraGroup(long jarg1, CameraGroup jarg1_);
  public final static native int CameraGroup_getKey(long jarg1, CameraGroup jarg1_);
  public final static native long CameraGroup_getChunk(long jarg1, CameraGroup jarg1_);
  public final static native void CameraGroup_setGroupType(long jarg1, CameraGroup jarg1_, int jarg2);
  public final static native int CameraGroup_getGroupType(long jarg1, CameraGroup jarg1_);
  public final static native void CameraGroup_setLabel(long jarg1, CameraGroup jarg1_, String jarg2);
  public final static native String CameraGroup_getLabel(long jarg1, CameraGroup jarg1_);
  public final static native void CameraGroup_setSelected(long jarg1, CameraGroup jarg1_, boolean jarg2);
  public final static native boolean CameraGroup_isSelected(long jarg1, CameraGroup jarg1_);
  public final static native void delete_CameraGroup(long jarg1);
  public final static native long new_MarkerGroup(long jarg1, MarkerGroup jarg1_);
  public final static native int MarkerGroup_getKey(long jarg1, MarkerGroup jarg1_);
  public final static native long MarkerGroup_getChunk(long jarg1, MarkerGroup jarg1_);
  public final static native void MarkerGroup_setLabel(long jarg1, MarkerGroup jarg1_, String jarg2);
  public final static native String MarkerGroup_getLabel(long jarg1, MarkerGroup jarg1_);
  public final static native void MarkerGroup_setSelected(long jarg1, MarkerGroup jarg1_, boolean jarg2);
  public final static native boolean MarkerGroup_isSelected(long jarg1, MarkerGroup jarg1_);
  public final static native void delete_MarkerGroup(long jarg1);
  public final static native long new_ScalebarGroup(long jarg1, ScalebarGroup jarg1_);
  public final static native int ScalebarGroup_getKey(long jarg1, ScalebarGroup jarg1_);
  public final static native long ScalebarGroup_getChunk(long jarg1, ScalebarGroup jarg1_);
  public final static native void ScalebarGroup_setLabel(long jarg1, ScalebarGroup jarg1_, String jarg2);
  public final static native String ScalebarGroup_getLabel(long jarg1, ScalebarGroup jarg1_);
  public final static native void ScalebarGroup_setSelected(long jarg1, ScalebarGroup jarg1_, boolean jarg2);
  public final static native boolean ScalebarGroup_isSelected(long jarg1, ScalebarGroup jarg1_);
  public final static native void delete_ScalebarGroup(long jarg1);
  public final static native long new_Camera(long jarg1, Camera jarg1_);
  public final static native int Camera_getKey(long jarg1, Camera jarg1_);
  public final static native long Camera_getChunk(long jarg1, Camera jarg1_);
  public final static native void Camera_setType(long jarg1, Camera jarg1_, int jarg2);
  public final static native int Camera_getType(long jarg1, Camera jarg1_);
  public final static native void Camera_setLabel(long jarg1, Camera jarg1_, String jarg2);
  public final static native String Camera_getLabel(long jarg1, Camera jarg1_);
  public final static native void Camera_setEnabled(long jarg1, Camera jarg1_, boolean jarg2);
  public final static native boolean Camera_isEnabled(long jarg1, Camera jarg1_);
  public final static native void Camera_setSelected(long jarg1, Camera jarg1_, boolean jarg2);
  public final static native boolean Camera_isSelected(long jarg1, Camera jarg1_);
  public final static native void Camera_setOrientation(long jarg1, Camera jarg1_, int jarg2);
  public final static native int Camera_getOrientation(long jarg1, Camera jarg1_);
  public final static native void Camera_setSensor(long jarg1, Camera jarg1_, long jarg2);
  public final static native long Camera_getSensor(long jarg1, Camera jarg1_);
  public final static native void Camera_setMaster(long jarg1, Camera jarg1_, long jarg2);
  public final static native long Camera_getMaster(long jarg1, Camera jarg1_);
  public final static native void Camera_setGroup(long jarg1, Camera jarg1_, long jarg2);
  public final static native long Camera_getGroup(long jarg1, Camera jarg1_);
  public final static native void Camera_setPhoto(long jarg1, Camera jarg1_, Photo jarg2);
  public final static native Photo Camera_getPhoto(long jarg1, Camera jarg1_);
  public final static native void Camera_setTransform(long jarg1, Camera jarg1_, Matrix jarg2);
  public final static native Matrix Camera_getTransform(long jarg1, Camera jarg1_);
  public final static native void Camera_setMask(long jarg1, Camera jarg1_, long jarg2);
  public final static native long Camera_getMask(long jarg1, Camera jarg1_);
  public final static native void Camera_setThumbnail(long jarg1, Camera jarg1_, long jarg2);
  public final static native long Camera_getThumbnail(long jarg1, Camera jarg1_);
  public final static native void Camera_setShutter(long jarg1, Camera jarg1_, Shutter jarg2);
  public final static native Shutter Camera_getShutter(long jarg1, Camera jarg1_);
  public final static native void Camera_setVignetting(long jarg1, Camera jarg1_, Vignetting[] jarg2);
  public final static native Vignetting[] Camera_getVignetting(long jarg1, Camera jarg1_);
  public final static native Vector Camera_getCenter(long jarg1, Camera jarg1_);
  public final static native Vector Camera_getError(long jarg1, Camera jarg1_, Vector jarg2, Vector jarg3);
  public final static native Vector Camera_project(long jarg1, Camera jarg1_, Vector jarg2);
  public final static native Vector Camera_unproject(long jarg1, Camera jarg1_, Vector jarg2);
  public final static native Vector Camera_unproject3D(long jarg1, Camera jarg1_, Vector jarg2);
  public final static native long Camera_loadImage(long jarg1, Camera jarg1_);
  public final static native Camera.Reference Camera_getReference(long jarg1, Camera jarg1_);
  public final static native void Camera_setReference(long jarg1, Camera jarg1_, Camera.Reference jarg2);
  public final static native void Camera_setMeta(long jarg1, Camera jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Camera_getMeta(long jarg1, Camera jarg1_);
  public final static native void delete_Camera(long jarg1);
  public final static native long new_Marker(long jarg1, Marker jarg1_);
  public final static native int Marker_getKey(long jarg1, Marker jarg1_);
  public final static native long Marker_getChunk(long jarg1, Marker jarg1_);
  public final static native void Marker_setType(long jarg1, Marker jarg1_, int jarg2);
  public final static native int Marker_getType(long jarg1, Marker jarg1_);
  public final static native void Marker_setLabel(long jarg1, Marker jarg1_, String jarg2);
  public final static native String Marker_getLabel(long jarg1, Marker jarg1_);
  public final static native void Marker_setEnabled(long jarg1, Marker jarg1_, boolean jarg2);
  public final static native boolean Marker_isEnabled(long jarg1, Marker jarg1_);
  public final static native void Marker_setSelected(long jarg1, Marker jarg1_, boolean jarg2);
  public final static native boolean Marker_isSelected(long jarg1, Marker jarg1_);
  public final static native void Marker_setProjection(long jarg1, Marker jarg1_, int jarg2, Marker.Projection jarg3);
  public final static native Marker.Projection Marker_getProjection(long jarg1, Marker jarg1_, int jarg2);
  public final static native Vector Marker_getPosition(long jarg1, Marker jarg1_);
  public final static native int[] Marker_getCameraKeys(long jarg1, Marker jarg1_);
  public final static native Marker.Reference Marker_getReference(long jarg1, Marker jarg1_);
  public final static native void Marker_setReference(long jarg1, Marker jarg1_, Marker.Reference jarg2);
  public final static native void Marker_setMeta(long jarg1, Marker jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Marker_getMeta(long jarg1, Marker jarg1_);
  public final static native void delete_Marker(long jarg1);
  public final static native long new_Scalebar(long jarg1, Scalebar jarg1_);
  public final static native int Scalebar_getKey(long jarg1, Scalebar jarg1_);
  public final static native long Scalebar_getChunk(long jarg1, Scalebar jarg1_);
  public final static native void Scalebar_setLabel(long jarg1, Scalebar jarg1_, String jarg2);
  public final static native String Scalebar_getLabel(long jarg1, Scalebar jarg1_);
  public final static native void Scalebar_setSelected(long jarg1, Scalebar jarg1_, boolean jarg2);
  public final static native boolean Scalebar_isSelected(long jarg1, Scalebar jarg1_);
  public final static native Scalebar.Reference Scalebar_getReference(long jarg1, Scalebar jarg1_);
  public final static native void Scalebar_setReference(long jarg1, Scalebar jarg1_, Scalebar.Reference jarg2);
  public final static native void Scalebar_setMeta(long jarg1, Scalebar jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Scalebar_getMeta(long jarg1, Scalebar jarg1_);
  public final static native void delete_Scalebar(long jarg1);
  public final static native long new_CameraTrack(long jarg1, CameraTrack jarg1_);
  public final static native void CameraTrack_setLabel(long jarg1, CameraTrack jarg1_, String jarg2);
  public final static native String CameraTrack_getLabel(long jarg1, CameraTrack jarg1_);
  public final static native void CameraTrack_setSelected(long jarg1, CameraTrack jarg1_, boolean jarg2);
  public final static native boolean CameraTrack_isSelected(long jarg1, CameraTrack jarg1_);
  public final static native void CameraTrack_setDuration(long jarg1, CameraTrack jarg1_, double jarg2);
  public final static native double CameraTrack_getDuration(long jarg1, CameraTrack jarg1_);
  public final static native void CameraTrack_setFieldOfView(long jarg1, CameraTrack jarg1_, double jarg2);
  public final static native double CameraTrack_getFieldOfView(long jarg1, CameraTrack jarg1_);
  public final static native void CameraTrack_setKeyframes(long jarg1, CameraTrack jarg1_, int[] jarg2);
  public final static native int[] CameraTrack_getKeyframes(long jarg1, CameraTrack jarg1_);
  public final static native int CameraTrack_getKey(long jarg1, CameraTrack jarg1_);
  public final static native long CameraTrack_getChunk(long jarg1, CameraTrack jarg1_);
  public final static native void CameraTrack_setMeta(long jarg1, CameraTrack jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> CameraTrack_getMeta(long jarg1, CameraTrack jarg1_);
  public final static native void delete_CameraTrack(long jarg1);
  public final static native long new_PointCloud__SWIG_0();
  public final static native long new_PointCloud__SWIG_1(long jarg1, PointCloud jarg1_);
  public final static native long new_PointCloud_Tracks__SWIG_0();
  public final static native long new_PointCloud_Tracks__SWIG_1(long jarg1, PointCloud.Tracks jarg1_);
  public final static native long PointCloud_Tracks_copy(long jarg1, PointCloud.Tracks jarg1_);
  public final static native void PointCloud_Tracks_resize(long jarg1, PointCloud.Tracks jarg1_, long jarg2);
  public final static native long PointCloud_Tracks_getSize(long jarg1, PointCloud.Tracks jarg1_);
  public final static native void PointCloud_Tracks_set(long jarg1, PointCloud.Tracks jarg1_, long jarg2, PointCloud.Track jarg3);
  public final static native PointCloud.Track PointCloud_Tracks_get(long jarg1, PointCloud.Tracks jarg1_, long jarg2);
  public final static native void delete_PointCloud_Tracks(long jarg1);
  public final static native long new_PointCloud_Points__SWIG_0();
  public final static native long new_PointCloud_Points__SWIG_1(long jarg1, PointCloud.Points jarg1_);
  public final static native long PointCloud_Points_copy(long jarg1, PointCloud.Points jarg1_);
  public final static native void PointCloud_Points_resize(long jarg1, PointCloud.Points jarg1_, long jarg2);
  public final static native long PointCloud_Points_getSize(long jarg1, PointCloud.Points jarg1_);
  public final static native void PointCloud_Points_set(long jarg1, PointCloud.Points jarg1_, long jarg2, PointCloud.Point jarg3);
  public final static native PointCloud.Point PointCloud_Points_get(long jarg1, PointCloud.Points jarg1_, long jarg2);
  public final static native void delete_PointCloud_Points(long jarg1);
  public final static native long new_PointCloud_Projections__SWIG_0();
  public final static native long new_PointCloud_Projections__SWIG_1(long jarg1, PointCloud.Projections jarg1_);
  public final static native long PointCloud_Projections_copy(long jarg1, PointCloud.Projections jarg1_);
  public final static native void PointCloud_Projections_resize(long jarg1, PointCloud.Projections jarg1_, long jarg2);
  public final static native long PointCloud_Projections_getSize(long jarg1, PointCloud.Projections jarg1_);
  public final static native void PointCloud_Projections_set(long jarg1, PointCloud.Projections jarg1_, long jarg2, PointCloud.Projection jarg3);
  public final static native PointCloud.Projection PointCloud_Projections_get(long jarg1, PointCloud.Projections jarg1_, long jarg2);
  public final static native void delete_PointCloud_Projections(long jarg1);
  public final static native long PointCloud_getChunk(long jarg1, PointCloud jarg1_);
  public final static native String PointCloud_getPath(long jarg1, PointCloud jarg1_);
  public final static native void PointCloud_setMeta(long jarg1, PointCloud jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> PointCloud_getMeta(long jarg1, PointCloud jarg1_);
  public final static native void PointCloud_setTracks(long jarg1, PointCloud jarg1_, long jarg2);
  public final static native long PointCloud_getTracks(long jarg1, PointCloud jarg1_);
  public final static native void PointCloud_setPoints(long jarg1, PointCloud jarg1_, long jarg2);
  public final static native long PointCloud_getPoints(long jarg1, PointCloud jarg1_);
  public final static native void PointCloud_setProjections(long jarg1, PointCloud jarg1_, int jarg2, long jarg3);
  public final static native long PointCloud_getProjections(long jarg1, PointCloud jarg1_, int jarg2);
  public final static native int[] PointCloud_getCameraKeys(long jarg1, PointCloud jarg1_);
  public final static native void PointCloud_cleanup(long jarg1, PointCloud jarg1_, Progress jarg2);
  public final static native Vector PointCloud_pickPoint(long jarg1, PointCloud jarg1_, Vector jarg2, Vector jarg3);
  public final static native long PointCloud_renderPreview(long jarg1, PointCloud jarg1_, long jarg2, long jarg3, Matrix jarg4, int jarg5, Progress jarg6);
  public final static native void delete_PointCloud(long jarg1);
  public final static native long new_DepthMap__SWIG_0();
  public final static native long new_DepthMap__SWIG_1(long jarg1, DepthMap jarg1_);
  public final static native void DepthMap_setCalibration(long jarg1, DepthMap jarg1_, int jarg2, long jarg3, Calibration jarg3_);
  public final static native long DepthMap_getCalibration(long jarg1, DepthMap jarg1_, int jarg2);
  public final static native void DepthMap_setImage(long jarg1, DepthMap jarg1_, int jarg2, long jarg3, Image jarg3_);
  public final static native long DepthMap_getImage(long jarg1, DepthMap jarg1_, int jarg2);
  public final static native void delete_DepthMap(long jarg1);
  public final static native long new_DepthMaps(long jarg1, DepthMaps jarg1_);
  public final static native int DepthMaps_getKey(long jarg1, DepthMaps jarg1_);
  public final static native long DepthMaps_getChunk(long jarg1, DepthMaps jarg1_);
  public final static native void DepthMaps_setLabel(long jarg1, DepthMaps jarg1_, String jarg2);
  public final static native String DepthMaps_getLabel(long jarg1, DepthMaps jarg1_);
  public final static native void DepthMaps_setDepthMap(long jarg1, DepthMaps jarg1_, int jarg2, long jarg3);
  public final static native long DepthMaps_getDepthMap(long jarg1, DepthMaps jarg1_, int jarg2);
  public final static native String DepthMaps_getPath(long jarg1, DepthMaps jarg1_);
  public final static native void DepthMaps_setMeta(long jarg1, DepthMaps jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> DepthMaps_getMeta(long jarg1, DepthMaps jarg1_);
  public final static native void delete_DepthMaps(long jarg1);
  public final static native long new_DenseCloud(long jarg1, DenseCloud jarg1_);
  public final static native int DenseCloud_getKey(long jarg1, DenseCloud jarg1_);
  public final static native long DenseCloud_getChunk(long jarg1, DenseCloud jarg1_);
  public final static native void DenseCloud_setLabel(long jarg1, DenseCloud jarg1_, String jarg2);
  public final static native String DenseCloud_getLabel(long jarg1, DenseCloud jarg1_);
  public final static native String DenseCloud_getPath(long jarg1, DenseCloud jarg1_);
  public final static native void DenseCloud_setMeta(long jarg1, DenseCloud jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> DenseCloud_getMeta(long jarg1, DenseCloud jarg1_);
  public final static native void DenseCloud_setTransform(long jarg1, DenseCloud jarg1_, Matrix jarg2);
  public final static native Matrix DenseCloud_getTransform(long jarg1, DenseCloud jarg1_);
  public final static native void DenseCloud_setCoordinateSystem(long jarg1, DenseCloud jarg1_, long jarg2);
  public final static native long DenseCloud_getCoordinateSystem(long jarg1, DenseCloud jarg1_);
  public final static native Vector DenseCloud_pickPoint(long jarg1, DenseCloud jarg1_, Vector jarg2, Vector jarg3);
  public final static native void DenseCloud_compactPoints(long jarg1, DenseCloud jarg1_, Progress jarg2);
  public final static native void DenseCloud_removePoints(long jarg1, DenseCloud jarg1_, int[] jarg2, Progress jarg3);
  public final static native void DenseCloud_restorePoints(long jarg1, DenseCloud jarg1_, int[] jarg2, Progress jarg3);
  public final static native void DenseCloud_assignClass(long jarg1, DenseCloud jarg1_, int jarg2, int[] jarg3, Progress jarg4);
  public final static native long DenseCloud_renderPreview(long jarg1, DenseCloud jarg1_, long jarg2, long jarg3, Matrix jarg4, int jarg5, Progress jarg6);
  public final static native void delete_DenseCloud(long jarg1);
  public final static native long new_Model(long jarg1, Model jarg1_);
  public final static native int Model_Texture_getKey(long jarg1, Model.Texture jarg1_);
  public final static native int Model_Texture_getTextureType(long jarg1, Model.Texture jarg1_);
  public final static native void Model_Texture_setLabel(long jarg1, Model.Texture jarg1_, String jarg2);
  public final static native String Model_Texture_getLabel(long jarg1, Model.Texture jarg1_);
  public final static native void Model_Texture_setMeta(long jarg1, Model.Texture jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Model_Texture_getMeta(long jarg1, Model.Texture jarg1_);
  public final static native void delete_Model_Texture(long jarg1);
  public final static native long new_Model_Mesh__SWIG_0();
  public final static native long new_Model_Mesh__SWIG_1(long jarg1, Model.Mesh jarg1_);
  public final static native void Model_Mesh_setFaceCount(long jarg1, Model.Mesh jarg1_, int jarg2);
  public final static native int Model_Mesh_getFaceCount(long jarg1, Model.Mesh jarg1_);
  public final static native void Model_Mesh_setVertexCount(long jarg1, Model.Mesh jarg1_, int jarg2);
  public final static native int Model_Mesh_getVertexCount(long jarg1, Model.Mesh jarg1_);
  public final static native void Model_Mesh_setFace(long jarg1, Model.Mesh jarg1_, int jarg2, Model.Face jarg3);
  public final static native Model.Face Model_Mesh_getFace(long jarg1, Model.Mesh jarg1_, int jarg2);
  public final static native void Model_Mesh_setVertex(long jarg1, Model.Mesh jarg1_, int jarg2, Model.Vertex jarg3);
  public final static native Model.Vertex Model_Mesh_getVertex(long jarg1, Model.Mesh jarg1_, int jarg2);
  public final static native void Model_Mesh_setVertexColor(long jarg1, Model.Mesh jarg1_, int jarg2, Color jarg3);
  public final static native Color Model_Mesh_getVertexColor(long jarg1, Model.Mesh jarg1_, int jarg2);
  public final static native boolean Model_Mesh_hasUV(long jarg1, Model.Mesh jarg1_);
  public final static native boolean Model_Mesh_hasVertexColors(long jarg1, Model.Mesh jarg1_);
  public final static native boolean Model_Mesh_hasVertexConfidence(long jarg1, Model.Mesh jarg1_);
  public final static native void delete_Model_Mesh(long jarg1);
  public final static native int Model_getKey(long jarg1, Model jarg1_);
  public final static native long Model_getChunk(long jarg1, Model jarg1_);
  public final static native void Model_setLabel(long jarg1, Model jarg1_, String jarg2);
  public final static native String Model_getLabel(long jarg1, Model jarg1_);
  public final static native long[] Model_getTextures(long jarg1, Model jarg1_);
  public final static native long Model_getActiveTexture(long jarg1, Model jarg1_, int jarg2);
  public final static native void Model_setMesh(long jarg1, Model jarg1_, long jarg2);
  public final static native long Model_getMesh(long jarg1, Model jarg1_);
  public final static native String Model_getPath(long jarg1, Model jarg1_);
  public final static native void Model_setMeta(long jarg1, Model jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Model_getMeta(long jarg1, Model jarg1_);
  public final static native int Model_getFaceCount(long jarg1, Model jarg1_);
  public final static native int Model_getVertexCount(long jarg1, Model jarg1_);
  public final static native boolean Model_hasUV(long jarg1, Model jarg1_);
  public final static native boolean Model_hasVertexColors(long jarg1, Model jarg1_);
  public final static native boolean Model_hasVertexConfidence(long jarg1, Model jarg1_);
  public final static native Vector Model_pickPoint(long jarg1, Model jarg1_, Vector jarg2, Vector jarg3);
  public final static native long Model_renderPreview(long jarg1, Model jarg1_, long jarg2, long jarg3, Matrix jarg4, Progress jarg5);
  public final static native void delete_Model(long jarg1);
  public final static native long new_TiledModel(long jarg1, TiledModel jarg1_);
  public final static native int TiledModel_getKey(long jarg1, TiledModel jarg1_);
  public final static native long TiledModel_getChunk(long jarg1, TiledModel jarg1_);
  public final static native void TiledModel_setLabel(long jarg1, TiledModel jarg1_, String jarg2);
  public final static native String TiledModel_getLabel(long jarg1, TiledModel jarg1_);
  public final static native String TiledModel_getPath(long jarg1, TiledModel jarg1_);
  public final static native void TiledModel_setMeta(long jarg1, TiledModel jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> TiledModel_getMeta(long jarg1, TiledModel jarg1_);
  public final static native void TiledModel_setTransform(long jarg1, TiledModel jarg1_, Matrix jarg2);
  public final static native Matrix TiledModel_getTransform(long jarg1, TiledModel jarg1_);
  public final static native void TiledModel_setCoordinateSystem(long jarg1, TiledModel jarg1_, long jarg2);
  public final static native long TiledModel_getCoordinateSystem(long jarg1, TiledModel jarg1_);
  public final static native Vector TiledModel_pickPoint(long jarg1, TiledModel jarg1_, Vector jarg2, Vector jarg3);
  public final static native long TiledModel_renderPreview(long jarg1, TiledModel jarg1_, long jarg2, long jarg3, Matrix jarg4, Progress jarg5);
  public final static native void delete_TiledModel(long jarg1);
  public final static native long new_Elevation(long jarg1, Elevation jarg1_);
  public final static native int Elevation_getKey(long jarg1, Elevation jarg1_);
  public final static native long Elevation_getChunk(long jarg1, Elevation jarg1_);
  public final static native void Elevation_setLabel(long jarg1, Elevation jarg1_, String jarg2);
  public final static native String Elevation_getLabel(long jarg1, Elevation jarg1_);
  public final static native String Elevation_getPath(long jarg1, Elevation jarg1_);
  public final static native void Elevation_setMeta(long jarg1, Elevation jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Elevation_getMeta(long jarg1, Elevation jarg1_);
  public final static native long Elevation_getWidth(long jarg1, Elevation jarg1_);
  public final static native long Elevation_getHeight(long jarg1, Elevation jarg1_);
  public final static native Vector Elevation_getTopLeft(long jarg1, Elevation jarg1_);
  public final static native Vector Elevation_getBottomRight(long jarg1, Elevation jarg1_);
  public final static native long Elevation_getProjection(long jarg1, Elevation jarg1_);
  public final static native double Elevation_getResolution(long jarg1, Elevation jarg1_);
  public final static native float Elevation_getMinElevation(long jarg1, Elevation jarg1_);
  public final static native float Elevation_getMaxElevation(long jarg1, Elevation jarg1_);
  public final static native void delete_Elevation(long jarg1);
  public final static native long new_Orthomosaic(long jarg1, Orthomosaic jarg1_);
  public final static native int Orthomosaic_getKey(long jarg1, Orthomosaic jarg1_);
  public final static native long Orthomosaic_getChunk(long jarg1, Orthomosaic jarg1_);
  public final static native void Orthomosaic_setLabel(long jarg1, Orthomosaic jarg1_, String jarg2);
  public final static native String Orthomosaic_getLabel(long jarg1, Orthomosaic jarg1_);
  public final static native String Orthomosaic_getPath(long jarg1, Orthomosaic jarg1_);
  public final static native void Orthomosaic_setMeta(long jarg1, Orthomosaic jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Orthomosaic_getMeta(long jarg1, Orthomosaic jarg1_);
  public final static native long Orthomosaic_getWidth(long jarg1, Orthomosaic jarg1_);
  public final static native long Orthomosaic_getHeight(long jarg1, Orthomosaic jarg1_);
  public final static native Vector Orthomosaic_getTopLeft(long jarg1, Orthomosaic jarg1_);
  public final static native Vector Orthomosaic_getBottomRight(long jarg1, Orthomosaic jarg1_);
  public final static native long Orthomosaic_getProjection(long jarg1, Orthomosaic jarg1_);
  public final static native double Orthomosaic_getResolution(long jarg1, Orthomosaic jarg1_);
  public final static native long Orthomosaic_renderPreview(long jarg1, Orthomosaic jarg1_, long jarg2, long jarg3, Progress jarg4);
  public final static native void delete_Orthomosaic(long jarg1);
  public final static native long new_Geometry__SWIG_0();
  public final static native long new_Geometry__SWIG_1(long jarg1, Geometry jarg1_);
  public final static native void Geometry_setType(long jarg1, Geometry jarg1_, int jarg2);
  public final static native int Geometry_getType(long jarg1, Geometry jarg1_);
  public final static native void Geometry_setVertices(long jarg1, Geometry jarg1_, Vector[] jarg2);
  public final static native Vector[] Geometry_getVertices(long jarg1, Geometry jarg1_);
  public final static native void Geometry_setVertices2D(long jarg1, Geometry jarg1_, Vector[] jarg2);
  public final static native Vector[] Geometry_getVertices2D(long jarg1, Geometry jarg1_);
  public final static native void Geometry_setGeometries(long jarg1, Geometry jarg1_, long[] jarg2);
  public final static native long[] Geometry_getGeometries(long jarg1, Geometry jarg1_);
  public final static native void Geometry_set3D(long jarg1, Geometry jarg1_, boolean jarg2);
  public final static native boolean Geometry_is3D(long jarg1, Geometry jarg1_);
  public final static native long Geometry_makePoint__SWIG_0(Vector jarg1, boolean jarg2);
  public final static native long Geometry_makePoint__SWIG_1(Vector jarg1);
  public final static native long Geometry_makeLineString__SWIG_0(Vector[] jarg1, boolean jarg2);
  public final static native long Geometry_makeLineString__SWIG_1(Vector[] jarg1);
  public final static native long Geometry_makePolygon__SWIG_0(Vector[] jarg1, boolean jarg2);
  public final static native long Geometry_makePolygon__SWIG_1(Vector[] jarg1);
  public final static native long Geometry_makePoint2D(Vector jarg1);
  public final static native long Geometry_makeLineString2D(Vector[] jarg1);
  public final static native long Geometry_makePolygon2D(Vector[] jarg1);
  public final static native long Geometry_makeMultiPoint(long[] jarg1);
  public final static native long Geometry_makeMultiLineString(long[] jarg1);
  public final static native long Geometry_makeMultiPolygon(long[] jarg1);
  public final static native long Geometry_makeGeometryCollection(long[] jarg1);
  public final static native void delete_Geometry(long jarg1);
  public final static native long new_AttachedGeometry__SWIG_0();
  public final static native long new_AttachedGeometry__SWIG_1(long jarg1, AttachedGeometry jarg1_);
  public final static native void AttachedGeometry_setType(long jarg1, AttachedGeometry jarg1_, int jarg2);
  public final static native int AttachedGeometry_getType(long jarg1, AttachedGeometry jarg1_);
  public final static native void AttachedGeometry_setVertices(long jarg1, AttachedGeometry jarg1_, int[] jarg2);
  public final static native int[] AttachedGeometry_getVertices(long jarg1, AttachedGeometry jarg1_);
  public final static native void AttachedGeometry_setGeometries(long jarg1, AttachedGeometry jarg1_, long[] jarg2);
  public final static native long[] AttachedGeometry_getGeometries(long jarg1, AttachedGeometry jarg1_);
  public final static native long AttachedGeometry_makePoint(int jarg1);
  public final static native long AttachedGeometry_makeLineString(int[] jarg1);
  public final static native long AttachedGeometry_makePolygon(int[] jarg1);
  public final static native long AttachedGeometry_makeMultiPoint(long[] jarg1);
  public final static native long AttachedGeometry_makeMultiLineString(long[] jarg1);
  public final static native long AttachedGeometry_makeMultiPolygon(long[] jarg1);
  public final static native long AttachedGeometry_makeGeometryCollection(long[] jarg1);
  public final static native void delete_AttachedGeometry(long jarg1);
  public final static native long new_ShapeGroup(long jarg1, ShapeGroup jarg1_);
  public final static native int ShapeGroup_getKey(long jarg1, ShapeGroup jarg1_);
  public final static native void ShapeGroup_setLabel(long jarg1, ShapeGroup jarg1_, String jarg2);
  public final static native String ShapeGroup_getLabel(long jarg1, ShapeGroup jarg1_);
  public final static native void ShapeGroup_setEnabled(long jarg1, ShapeGroup jarg1_, boolean jarg2);
  public final static native boolean ShapeGroup_isEnabled(long jarg1, ShapeGroup jarg1_);
  public final static native void ShapeGroup_setSelected(long jarg1, ShapeGroup jarg1_, boolean jarg2);
  public final static native boolean ShapeGroup_isSelected(long jarg1, ShapeGroup jarg1_);
  public final static native void ShapeGroup_setMeta(long jarg1, ShapeGroup jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> ShapeGroup_getMeta(long jarg1, ShapeGroup jarg1_);
  public final static native void delete_ShapeGroup(long jarg1);
  public final static native long new_Shape(long jarg1, Shape jarg1_);
  public final static native int Shape_getKey(long jarg1, Shape jarg1_);
  public final static native void Shape_setBoundaryType(long jarg1, Shape jarg1_, int jarg2);
  public final static native int Shape_getBoundaryType(long jarg1, Shape jarg1_);
  public final static native void Shape_setLabel(long jarg1, Shape jarg1_, String jarg2);
  public final static native String Shape_getLabel(long jarg1, Shape jarg1_);
  public final static native void Shape_setSelected(long jarg1, Shape jarg1_, boolean jarg2);
  public final static native boolean Shape_isSelected(long jarg1, Shape jarg1_);
  public final static native void Shape_setGroup(long jarg1, Shape jarg1_, long jarg2, ShapeGroup jarg2_);
  public final static native long Shape_getGroup(long jarg1, Shape jarg1_);
  public final static native boolean Shape_isAttached(long jarg1, Shape jarg1_);
  public final static native boolean Shape_is3D(long jarg1, Shape jarg1_);
  public final static native void Shape_setGeometry(long jarg1, Shape jarg1_, long jarg2, Geometry jarg2_);
  public final static native long Shape_getGeometry(long jarg1, Shape jarg1_);
  public final static native void Shape_setAttachedGeometry(long jarg1, Shape jarg1_, long jarg2, AttachedGeometry jarg2_);
  public final static native long Shape_getAttachedGeometry(long jarg1, Shape jarg1_);
  public final static native void delete_Shape(long jarg1);
  public final static native long new_Shapes__SWIG_0();
  public final static native long new_Shapes__SWIG_1(long jarg1, Shapes jarg1_);
  public final static native long Shapes_getChunk(long jarg1, Shapes jarg1_);
  public final static native String Shapes_getPath(long jarg1, Shapes jarg1_);
  public final static native void Shapes_setMeta(long jarg1, Shapes jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Shapes_getMeta(long jarg1, Shapes jarg1_);
  public final static native long[] Shapes_getShapes(long jarg1, Shapes jarg1_);
  public final static native long[] Shapes_getGroups(long jarg1, Shapes jarg1_);
  public final static native long Shapes_getProjection(long jarg1, Shapes jarg1_);
  public final static native void delete_Shapes(long jarg1);
  public final static native long new_Chunk(long jarg1, Chunk jarg1_);
  public final static native String Chunk_dump(long jarg1, Chunk jarg1_);
  public final static native void Chunk_load(long jarg1, Chunk jarg1_, String jarg2);
  public final static native int Chunk_getKey(long jarg1, Chunk jarg1_);
  public final static native int Chunk_getFrameKey(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getDocument(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setLabel(long jarg1, Chunk jarg1_, String jarg2);
  public final static native String Chunk_getLabel(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setEnabled(long jarg1, Chunk jarg1_, boolean jarg2);
  public final static native boolean Chunk_isEnabled(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setSelected(long jarg1, Chunk jarg1_, boolean jarg2);
  public final static native boolean Chunk_isSelected(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getFrames(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getSensors(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getCameraGroups(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getMarkerGroups(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getScalebarGroups(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getCameras(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getMarkers(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getScalebars(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getCameraTracks(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getFrameKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getSensorKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getCameraGroupKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getMarkerGroupKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getScalebarGroupKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getCameraKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getMarkerKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getScalebarKeys(long jarg1, Chunk jarg1_);
  public final static native int[] Chunk_getCameraTrackKeys(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getFrame(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getSensor(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getCameraGroup(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getMarkerGroup(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getScalebarGroup(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getCamera(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getMarker(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getScalebar(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_getCameraTrack(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_addFrame(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addSensor(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addCameraGroup(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addMarkerGroup(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addScalebarGroup(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addCamera(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addMarker__SWIG_0(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addCameraTrack(long jarg1, Chunk jarg1_);
  public final static native long Chunk_addMarker__SWIG_1(long jarg1, Chunk jarg1_, Vector jarg2, boolean jarg3);
  public final static native long Chunk_addScalebar__SWIG_0(long jarg1, Chunk jarg1_, long jarg2, Camera jarg2_, long jarg3, Camera jarg3_);
  public final static native long Chunk_addScalebar__SWIG_1(long jarg1, Chunk jarg1_, long jarg2, Marker jarg2_, long jarg3, Marker jarg3_);
  public final static native void Chunk_removeFrames(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeSensors(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeCameraGroups(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeMarkerGroups(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeScalebarGroups(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeCameras(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeMarkers(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeScalebars(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_removeCameraTracks(long jarg1, Chunk jarg1_, int[] jarg2);
  public final static native void Chunk_setCoordinateSystem(long jarg1, Chunk jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long Chunk_getCoordinateSystem(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setCameraCoordinateSystem(long jarg1, Chunk jarg1_, long jarg2);
  public final static native long Chunk_getCameraCoordinateSystem(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setMarkerCoordinateSystem(long jarg1, Chunk jarg1_, long jarg2);
  public final static native long Chunk_getMarkerCoordinateSystem(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setTransform(long jarg1, Chunk jarg1_, Transform jarg2);
  public final static native Transform Chunk_getTransform(long jarg1, Chunk jarg1_);
  public final static native void Chunk_resetTransform(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasTransform(long jarg1, Chunk jarg1_);
  public final static native void Chunk_updateTransform(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setRegion(long jarg1, Chunk jarg1_, Region jarg2);
  public final static native Region Chunk_getRegion(long jarg1, Chunk jarg1_);
  public final static native void Chunk_resetRegion(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setCirCalibration(long jarg1, Chunk jarg1_, Matrix jarg2);
  public final static native Matrix Chunk_getCirCalibration(long jarg1, Chunk jarg1_);
  public final static native void Chunk_updateCirCalibration(long jarg1, Chunk jarg1_, Progress jarg2);
  public final static native void Chunk_setRasterTransform(long jarg1, Chunk jarg1_, long jarg2);
  public final static native long Chunk_getRasterTransform(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setCameraLocationAccuracy(long jarg1, Chunk jarg1_, Vector jarg2);
  public final static native Vector Chunk_getCameraLocationAccuracy(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setCameraOrientationAccuracy(long jarg1, Chunk jarg1_, Vector jarg2);
  public final static native Vector Chunk_getCameraOrientationAccuracy(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setMarkerLocationAccuracy(long jarg1, Chunk jarg1_, Vector jarg2);
  public final static native Vector Chunk_getMarkerLocationAccuracy(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setMarkerProjectionAccuracy(long jarg1, Chunk jarg1_, double jarg2);
  public final static native double Chunk_getMarkerProjectionAccuracy(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setTiepointProjectionAccuracy(long jarg1, Chunk jarg1_, double jarg2);
  public final static native double Chunk_getTiepointProjectionAccuracy(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setPrimaryChannel(long jarg1, Chunk jarg1_, int jarg2);
  public final static native int Chunk_getPrimaryChannel(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setImageBrightness(long jarg1, Chunk jarg1_, double jarg2);
  public final static native double Chunk_getImageBrightness(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setImageContrast(long jarg1, Chunk jarg1_, double jarg2);
  public final static native double Chunk_getImageContrast(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasPointCloud(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasDenseCloud(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasDepthMaps(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasModel(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasTiledModel(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasElevation(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasOrthomosaic(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_hasShapes(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setPointCloud(long jarg1, Chunk jarg1_, long jarg2);
  public final static native long Chunk_getPointCloud(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getDenseCloud(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getDepthMaps(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getModel(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getTiledModel(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getElevation(long jarg1, Chunk jarg1_);
  public final static native long Chunk_getOrthomosaic(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setShapes(long jarg1, Chunk jarg1_, long jarg2);
  public final static native long Chunk_getShapes(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removePointCloud(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeDenseCloud(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeDepthMaps(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeModel(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeTiledModel(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeElevation(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeOrthomosaic(long jarg1, Chunk jarg1_);
  public final static native void Chunk_removeShapes(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getDepthMapsSets(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getDenseClouds(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getModels(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getTiledModels(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getElevations(long jarg1, Chunk jarg1_);
  public final static native long[] Chunk_getOrthomosaics(long jarg1, Chunk jarg1_);
  public final static native void Chunk_setDepthMapsKey(long jarg1, Chunk jarg1_, int jarg2);
  public final static native void Chunk_setDenseCloudKey(long jarg1, Chunk jarg1_, int jarg2);
  public final static native void Chunk_setModelKey(long jarg1, Chunk jarg1_, int jarg2);
  public final static native void Chunk_setTiledModelKey(long jarg1, Chunk jarg1_, int jarg2);
  public final static native void Chunk_setElevationKey(long jarg1, Chunk jarg1_, int jarg2);
  public final static native void Chunk_setOrthomosaicKey(long jarg1, Chunk jarg1_, int jarg2);
  public final static native void Chunk_setMeta(long jarg1, Chunk jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Chunk_getMeta(long jarg1, Chunk jarg1_);
  public final static native boolean Chunk_loadReferenceExif(long jarg1, Chunk jarg1_, boolean jarg2, boolean jarg3);
  public final static native void Chunk_addPhotos(long jarg1, Chunk jarg1_, String[] jarg2, Progress jarg3);
  public final static native void Chunk_thinPointCloud(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long Chunk_renderPreview(long jarg1, Chunk jarg1_, long jarg2, long jarg3, Matrix jarg4, int jarg5, Progress jarg6);
  public final static native void delete_Chunk(long jarg1);
  public final static native long new_Document__SWIG_0();
  public final static native long new_Document__SWIG_1(long jarg1, Document jarg1_);
  public final static native String Document_dump(long jarg1, Document jarg1_);
  public final static native void Document_load(long jarg1, Document jarg1_, String jarg2);
  public final static native void Document_clear(long jarg1, Document jarg1_);
  public final static native void Document_save__SWIG_0(long jarg1, Document jarg1_, String jarg2, Progress jarg3);
  public final static native void Document_save__SWIG_1(long jarg1, Document jarg1_, String jarg2, int[] jarg3, Progress jarg4);
  public final static native void Document_open(long jarg1, Document jarg1_, String jarg2, boolean jarg3, Progress jarg4);
  public final static native String Document_getPath(long jarg1, Document jarg1_);
  public final static native void Document_setReadOnly(long jarg1, Document jarg1_, boolean jarg2);
  public final static native boolean Document_isReadOnly(long jarg1, Document jarg1_);
  public final static native long Document_addChunk(long jarg1, Document jarg1_);
  public final static native long[] Document_getChunks(long jarg1, Document jarg1_);
  public final static native int[] Document_getChunkKeys(long jarg1, Document jarg1_);
  public final static native long Document_getChunk(long jarg1, Document jarg1_, int jarg2);
  public final static native long Document_getActiveChunk(long jarg1, Document jarg1_);
  public final static native void Document_setActiveChunk(long jarg1, Document jarg1_, long jarg2, Chunk jarg2_);
  public final static native void Document_remove(long jarg1, Document jarg1_, long jarg2, Chunk jarg2_);
  public final static native void Document_append(long jarg1, Document jarg1_, long jarg2, Document jarg2_, Progress jarg3);
  public final static native void Document_setMeta(long jarg1, Document jarg1_, Map<String,String> jarg2);
  public final static native Map<String,String> Document_getMeta(long jarg1, Document jarg1_);
  public final static native void delete_Document(long jarg1);
  public final static native long new_Task__SWIG_0(long jarg1, Task jarg1_);
  public final static native long new_Task__SWIG_1(String jarg1);
  public final static native String Task_getName(long jarg1, Task jarg1_);
  public final static native String[] Task_getParameterNames(long jarg1, Task jarg1_);
  public final static native void Task_setParameter(long jarg1, Task jarg1_, String jarg2, Object jarg3);
  public final static native Object Task_getParameter(long jarg1, Task jarg1_, String jarg2);
  public final static native int Task_getTarget(long jarg1, Task jarg1_);
  public final static native boolean Task_isGPUSupported(long jarg1, Task jarg1_);
  public final static native int Task_getWorkitemCount(long jarg1, Task jarg1_);
  public final static native void Task_setWorkitemCount(long jarg1, Task jarg1_, int jarg2);
  public final static native NetworkTask Task_toNetworkTask__SWIG_0(long jarg1, Task jarg1_);
  public final static native NetworkTask Task_toNetworkTask__SWIG_1(long jarg1, Task jarg1_, long jarg2, Chunk jarg2_);
  public final static native NetworkTask Task_toNetworkTask__SWIG_2(long jarg1, Task jarg1_, long[] jarg2);
  public final static native NetworkTask Task_toNetworkTask__SWIG_3(long jarg1, Task jarg1_, long jarg2, Document jarg2_);
  public final static native void Task_apply__SWIG_0(long jarg1, Task jarg1_, long jarg2, Chunk jarg2_, Progress jarg3);
  public final static native void Task_apply__SWIG_1(long jarg1, Task jarg1_, long jarg2, Document jarg2_, Progress jarg3);
  public final static native void delete_Task(long jarg1);
  public final static native long new_NetworkClient();
  public final static native boolean NetworkClient_connect(long jarg1, NetworkClient jarg1_, String jarg2, int jarg3);
  public final static native void NetworkClient_disconnect(long jarg1, NetworkClient jarg1_);
  public final static native int NetworkClient_createBatch(long jarg1, NetworkClient jarg1_, String jarg2, NetworkTask[] jarg3, Map<String,String> jarg4);
  public final static native int NetworkClient_findBatch(long jarg1, NetworkClient jarg1_, String jarg2);
  public final static native void NetworkClient_abortBatch(long jarg1, NetworkClient jarg1_, int jarg2);
  public final static native void NetworkClient_setBatchPaused(long jarg1, NetworkClient jarg1_, int jarg2, boolean jarg3);
  public final static native void NetworkClient_setBatchPriority(long jarg1, NetworkClient jarg1_, int jarg2, int jarg3);
  public final static native void NetworkClient_setBatchNodeLimit(long jarg1, NetworkClient jarg1_, int jarg2, int jarg3);
  public final static native void NetworkClient_abortNode(long jarg1, NetworkClient jarg1_, int jarg2);
  public final static native void NetworkClient_quitNode(long jarg1, NetworkClient jarg1_, int jarg2);
  public final static native void NetworkClient_setNodePaused(long jarg1, NetworkClient jarg1_, int jarg2, boolean jarg3);
  public final static native void NetworkClient_setNodePriority(long jarg1, NetworkClient jarg1_, int jarg2, int jarg3);
  public final static native void NetworkClient_setNodeCapability(long jarg1, NetworkClient jarg1_, int jarg2, int jarg3);
  public final static native void NetworkClient_setNodeGPUMask(long jarg1, NetworkClient jarg1_, int jarg2, long jarg3);
  public final static native void NetworkClient_setNodeCPUEnable(long jarg1, NetworkClient jarg1_, int jarg2, boolean jarg3);
  public final static native NetworkClient.ServerInfo NetworkClient_getServerInfo(long jarg1, NetworkClient jarg1_);
  public final static native NetworkClient.ServerStatus NetworkClient_getServerStatus(long jarg1, NetworkClient jarg1_, long jarg2);
  public final static native void NetworkClient_setMasterServer(long jarg1, NetworkClient jarg1_, String jarg2);
  public final static native NetworkClient.BatchStatus NetworkClient_getBatchStatus(long jarg1, NetworkClient jarg1_, int jarg2, long jarg3);
  public final static native NetworkClient.NodeStatus NetworkClient_getNodeStatus(long jarg1, NetworkClient jarg1_, int jarg2, long jarg3);
  public final static native NetworkClient.BatchList NetworkClient_getBatchList(long jarg1, NetworkClient jarg1_, long jarg2);
  public final static native NetworkClient.NodeList NetworkClient_getNodeList(long jarg1, NetworkClient jarg1_, long jarg2);
  public final static native String NetworkClient_dumpBatches(long jarg1, NetworkClient jarg1_, int[] jarg2);
  public final static native void NetworkClient_loadBatches(long jarg1, NetworkClient jarg1_, String jarg2);
  public final static native void delete_NetworkClient(long jarg1);
}
