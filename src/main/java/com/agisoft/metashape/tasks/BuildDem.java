/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class BuildDem extends Task {
  private transient long swigCPtr;

  protected BuildDem(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.BuildDem_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BuildDem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_BuildDem(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BuildDem() {
    this(TasksJNI.new_BuildDem(), true);
  }

  /**
   *  List of dense point classes to be used for surface extraction.
   */
  public void setClasses(int[] value) {
    TasksJNI.BuildDem_setClasses(swigCPtr, this, value);
  }

  /**
   *  List of dense point classes to be used for surface extraction.
   */
  public int[] getClasses() { return TasksJNI.BuildDem_getClasses(swigCPtr, this); }

  /**
   *  Flip X axis direction. Default: false
   */
  public void setFlipX(boolean value) {
    TasksJNI.BuildDem_setFlipX(swigCPtr, this, value);
  }

  /**
   *  Flip X axis direction. Default: false
   */
  public boolean getFlipX() {
    return TasksJNI.BuildDem_getFlipX(swigCPtr, this);
  }

  /**
   *  Flip Y axis direction. Default: false
   */
  public void setFlipY(boolean value) {
    TasksJNI.BuildDem_setFlipY(swigCPtr, this, value);
  }

  /**
   *  Flip Y axis direction. Default: false
   */
  public boolean getFlipY() {
    return TasksJNI.BuildDem_getFlipY(swigCPtr, this);
  }

  /**
   *  Flip Z axis direction. Default: false
   */
  public void setFlipZ(boolean value) {
    TasksJNI.BuildDem_setFlipZ(swigCPtr, this, value);
  }

  /**
   *  Flip Z axis direction. Default: false
   */
  public boolean getFlipZ() {
    return TasksJNI.BuildDem_getFlipZ(swigCPtr, this);
  }

  /**
   *  Interpolation mode. Default: Interpolation.EnabledInterpolation
   */
  public void setInterpolation(Interpolation value) {
    TasksJNI.BuildDem_setInterpolation(swigCPtr, this, value.ordinal());
  }

  /**
   *  Interpolation mode. Default: Interpolation.EnabledInterpolation
   */
  public Interpolation getInterpolation() {
    return Interpolation.class.getEnumConstants()[TasksJNI.BuildDem_getInterpolation(swigCPtr, this)];
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public void setMaxWorkgroupSize(int value) {
    TasksJNI.BuildDem_setMaxWorkgroupSize(swigCPtr, this, value);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public int getMaxWorkgroupSize() {
    return TasksJNI.BuildDem_getMaxWorkgroupSize(swigCPtr, this);
  }

  /**
   *  Output projection.
   */
  public void setProjection(OrthoProjection value) {
    TasksJNI.BuildDem_setProjection(swigCPtr, this, OrthoProjection.getCPtr(value), value);
  }

  /**
   *  Output projection.
   */
  public OrthoProjection getProjection() {
    return new OrthoProjection(TasksJNI.BuildDem_getProjection(swigCPtr, this), true);
  }

  /**
   *  Region to be processed.
   */
  public void setRegion(BBox2d value) {
    TasksJNI.BuildDem_setRegion(swigCPtr, this, BBox2d.getCPtr(value), value);
  }

  /**
   *  Region to be processed.
   */
  public BBox2d getRegion() {
    return new BBox2d(TasksJNI.BuildDem_getRegion(swigCPtr, this), true);
  }

  /**
   *  Output resolution in meters. Default: 0.0
   */
  public void setResolution(double value) {
    TasksJNI.BuildDem_setResolution(swigCPtr, this, value);
  }

  /**
   *  Output resolution in meters. Default: 0.0
   */
  public double getResolution() {
    return TasksJNI.BuildDem_getResolution(swigCPtr, this);
  }

  /**
   *  Selects between dense point cloud and sparse point cloud. Default: DataSource.DenseCloudData
   */
  public void setSourceData(DataSource value) {
    TasksJNI.BuildDem_setSourceData(swigCPtr, this, value.ordinal());
  }

  /**
   *  Selects between dense point cloud and sparse point cloud. Default: DataSource.DenseCloudData
   */
  public DataSource getSourceData() {
    return DataSource.class.getEnumConstants()[TasksJNI.BuildDem_getSourceData(swigCPtr, this)];
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public void setSubdivideTask(boolean value) {
    TasksJNI.BuildDem_setSubdivideTask(swigCPtr, this, value);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public boolean getSubdivideTask() {
    return TasksJNI.BuildDem_getSubdivideTask(swigCPtr, this);
  }

  /**
   *  Number of tiles in a workitem. Default: 10
   */
  public void setWorkitemSizeTiles(int value) {
    TasksJNI.BuildDem_setWorkitemSizeTiles(swigCPtr, this, value);
  }

  /**
   *  Number of tiles in a workitem. Default: 10
   */
  public int getWorkitemSizeTiles() {
    return TasksJNI.BuildDem_getWorkitemSizeTiles(swigCPtr, this);
  }

}
