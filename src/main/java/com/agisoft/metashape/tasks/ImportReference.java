/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class ImportReference extends Task {
  private transient long swigCPtr;

  protected ImportReference(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.ImportReference_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ImportReference obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_ImportReference(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ImportReference() {
    this(TasksJNI.new_ImportReference(), true);
  }

  /**
   *  Column order in csv format (n - label, o - enabled flag, x/y/z - coordinates, X/Y/Z - coordinate accuracy, a/b/c - rotation angles, A/B/C - rotation angle accuracy, [] - group of multiple values, | - column separator within group).
   */
  public void setColumns(String value) {
    TasksJNI.ImportReference_setColumns(swigCPtr, this, value);
  }

  /**
   *  Column order in csv format (n - label, o - enabled flag, x/y/z - coordinates, X/Y/Z - coordinate accuracy, a/b/c - rotation angles, A/B/C - rotation angle accuracy, [] - group of multiple values, | - column separator within group).
   */
  public String getColumns() {
    return TasksJNI.ImportReference_getColumns(swigCPtr, this);
  }

  /**
   *  Create markers for missing entries (csv format only). Default: false
   */
  public void setCreateMarkers(boolean value) {
    TasksJNI.ImportReference_setCreateMarkers(swigCPtr, this, value);
  }

  /**
   *  Create markers for missing entries (csv format only). Default: false
   */
  public boolean getCreateMarkers() {
    return TasksJNI.ImportReference_getCreateMarkers(swigCPtr, this);
  }

  /**
   *  Reference data coordinate system (csv format only).
   */
  public void setCRS(CoordinateSystem value) {
    TasksJNI.ImportReference_setCRS(swigCPtr, this, CoordinateSystem.getCPtr(value), value);
  }

  /**
   *  Reference data coordinate system (csv format only).
   */
  public CoordinateSystem getCRS() {
    return new CoordinateSystem(TasksJNI.ImportReference_getCRS(swigCPtr, this), true);
  }

  /**
   *  Column delimiter in csv format.
   */
  public void setDelimiter(String value) {
    TasksJNI.ImportReference_setDelimiter(swigCPtr, this, value);
  }

  /**
   *  Column delimiter in csv format.
   */
  public String getDelimiter() {
    return TasksJNI.ImportReference_getDelimiter(swigCPtr, this);
  }

  /**
   *  File format. Default: ReferenceFormat.ReferenceFormatCSV
   */
  public void setFormat(ReferenceFormat value) {
    TasksJNI.ImportReference_setFormat(swigCPtr, this, value.ordinal());
  }

  /**
   *  File format. Default: ReferenceFormat.ReferenceFormatCSV
   */
  public ReferenceFormat getFormat() {
    return ReferenceFormat.class.getEnumConstants()[TasksJNI.ImportReference_getFormat(swigCPtr, this)];
  }

  /**
   *  Combine consequitive delimiters in csv format. Default: false
   */
  public void setGroupDelimiters(boolean value) {
    TasksJNI.ImportReference_setGroupDelimiters(swigCPtr, this, value);
  }

  /**
   *  Combine consequitive delimiters in csv format. Default: false
   */
  public boolean getGroupDelimiters() {
    return TasksJNI.ImportReference_getGroupDelimiters(swigCPtr, this);
  }

  /**
   *  Matches reference data based on coordinates alone (csv format only). Default: false
   */
  public void setIgnoreLabels(boolean value) {
    TasksJNI.ImportReference_setIgnoreLabels(swigCPtr, this, value);
  }

  /**
   *  Matches reference data based on coordinates alone (csv format only). Default: false
   */
  public boolean getIgnoreLabels() {
    return TasksJNI.ImportReference_getIgnoreLabels(swigCPtr, this);
  }

  /**
   *  List of items to load reference for (csv format only). Default: ReferenceItems.7
   */
  public void setItems(ReferenceItems value) {
    TasksJNI.ImportReference_setItems(swigCPtr, this, value.ordinal());
  }

  /**
   *  List of items to load reference for (csv format only). Default: ReferenceItems.7
   */
  public ReferenceItems getItems() {
    return ReferenceItems.class.getEnumConstants()[TasksJNI.ImportReference_getItems(swigCPtr, this)];
  }

  /**
   *  Path to the file with reference data.
   */
  public void setPath(String value) {
    TasksJNI.ImportReference_setPath(swigCPtr, this, value);
  }

  /**
   *  Path to the file with reference data.
   */
  public String getPath() {
    return TasksJNI.ImportReference_getPath(swigCPtr, this);
  }

  /**
   *  Shutter lag in seconds (APM format only). Default: 0.0
   */
  public void setShutterLag(double value) {
    TasksJNI.ImportReference_setShutterLag(swigCPtr, this, value);
  }

  /**
   *  Shutter lag in seconds (APM format only). Default: 0.0
   */
  public double getShutterLag() {
    return TasksJNI.ImportReference_getShutterLag(swigCPtr, this);
  }

  /**
   *  Number of rows to skip in (csv format only). Default: 0
   */
  public void setSkipRows(int value) {
    TasksJNI.ImportReference_setSkipRows(swigCPtr, this, value);
  }

  /**
   *  Number of rows to skip in (csv format only). Default: 0
   */
  public int getSkipRows() {
    return TasksJNI.ImportReference_getSkipRows(swigCPtr, this);
  }

  /**
   *  Error threshold in meters used when ignore_labels is set (csv format only). Default: 0.1
   */
  public void setThreshold(double value) {
    TasksJNI.ImportReference_setThreshold(swigCPtr, this, value);
  }

  /**
   *  Error threshold in meters used when ignore_labels is set (csv format only). Default: 0.1
   */
  public double getThreshold() {
    return TasksJNI.ImportReference_getThreshold(swigCPtr, this);
  }

}
