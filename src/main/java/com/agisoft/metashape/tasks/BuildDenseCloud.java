/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class BuildDenseCloud extends Task {
  private transient long swigCPtr;

  protected BuildDenseCloud(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.BuildDenseCloud_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BuildDenseCloud obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_BuildDenseCloud(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BuildDenseCloud() {
    this(TasksJNI.new_BuildDenseCloud(), true);
  }

  /**
   *  Enable store depth maps option. Default: true
   */
  public void setKeepDepth(boolean value) {
    TasksJNI.BuildDenseCloud_setKeepDepth(swigCPtr, this, value);
  }

  /**
   *  Enable store depth maps option. Default: true
   */
  public boolean getKeepDepth() {
    return TasksJNI.BuildDenseCloud_getKeepDepth(swigCPtr, this);
  }

  /**
   *  Maximum number of neighbor images to use for depth map filtering. Default: 100
   */
  public void setMaxNeighbors(int value) {
    TasksJNI.BuildDenseCloud_setMaxNeighbors(swigCPtr, this, value);
  }

  /**
   *  Maximum number of neighbor images to use for depth map filtering. Default: 100
   */
  public int getMaxNeighbors() {
    return TasksJNI.BuildDenseCloud_getMaxNeighbors(swigCPtr, this);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public void setMaxWorkgroupSize(int value) {
    TasksJNI.BuildDenseCloud_setMaxWorkgroupSize(swigCPtr, this, value);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public int getMaxWorkgroupSize() {
    return TasksJNI.BuildDenseCloud_getMaxWorkgroupSize(swigCPtr, this);
  }

  /**
   *  Enable point colors calculation. Default: true
   */
  public void setPointColors(boolean value) {
    TasksJNI.BuildDenseCloud_setPointColors(swigCPtr, this, value);
  }

  /**
   *  Enable point colors calculation. Default: true
   */
  public boolean getPointColors() {
    return TasksJNI.BuildDenseCloud_getPointColors(swigCPtr, this);
  }

  /**
   *  Enable point confidence calculation. Default: false
   */
  public void setPointConfidence(boolean value) {
    TasksJNI.BuildDenseCloud_setPointConfidence(swigCPtr, this, value);
  }

  /**
   *  Enable point confidence calculation. Default: false
   */
  public boolean getPointConfidence() {
    return TasksJNI.BuildDenseCloud_getPointConfidence(swigCPtr, this);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public void setSubdivideTask(boolean value) {
    TasksJNI.BuildDenseCloud_setSubdivideTask(swigCPtr, this, value);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public boolean getSubdivideTask() {
    return TasksJNI.BuildDenseCloud_getSubdivideTask(swigCPtr, this);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public void setWorkitemSizeCameras(int value) {
    TasksJNI.BuildDenseCloud_setWorkitemSizeCameras(swigCPtr, this, value);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public int getWorkitemSizeCameras() {
    return TasksJNI.BuildDenseCloud_getWorkitemSizeCameras(swigCPtr, this);
  }

}
