/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class TransformRaster extends Task {
  private transient long swigCPtr;

  protected TransformRaster(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.TransformRaster_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TransformRaster obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_TransformRaster(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public TransformRaster() {
    this(TasksJNI.new_TransformRaster(), true);
  }

  /**
   *  Asset key to transform. Default: -1
   */
  public void setAsset(int value) {
    TasksJNI.TransformRaster_setAsset(swigCPtr, this, value);
  }

  /**
   *  Asset key to transform. Default: -1
   */
  public int getAsset() {
    return TasksJNI.TransformRaster_getAsset(swigCPtr, this);
  }

  /**
   *  Selects between DEM and orthomosaic. Default: DataSource.ElevationData
   */
  public void setDataSource(DataSource value) {
    TasksJNI.TransformRaster_setDataSource(swigCPtr, this, value.ordinal());
  }

  /**
   *  Selects between DEM and orthomosaic. Default: DataSource.ElevationData
   */
  public DataSource getDataSource() {
    return DataSource.class.getEnumConstants()[TasksJNI.TransformRaster_getDataSource(swigCPtr, this)];
  }

  /**
   *  Raster height. Default: 0
   */
  public void setHeight(int value) {
    TasksJNI.TransformRaster_setHeight(swigCPtr, this, value);
  }

  /**
   *  Raster height. Default: 0
   */
  public int getHeight() {
    return TasksJNI.TransformRaster_getHeight(swigCPtr, this);
  }

  /**
   *  No-data value (DEM export only). Default: -32767.0
   */
  public void setNodataValue(double value) {
    TasksJNI.TransformRaster_setNodataValue(swigCPtr, this, value);
  }

  /**
   *  No-data value (DEM export only). Default: -32767.0
   */
  public double getNodataValue() {
    return TasksJNI.TransformRaster_getNodataValue(swigCPtr, this);
  }

  /**
   *  Use north-up orientation for export. Default: true
   */
  public void setNorthUp(boolean value) {
    TasksJNI.TransformRaster_setNorthUp(swigCPtr, this, value);
  }

  /**
   *  Use north-up orientation for export. Default: true
   */
  public boolean getNorthUp() {
    return TasksJNI.TransformRaster_getNorthUp(swigCPtr, this);
  }

  /**
   *  Operand asset key. Default: -1
   */
  public void setOperandAsset(int value) {
    TasksJNI.TransformRaster_setOperandAsset(swigCPtr, this, value);
  }

  /**
   *  Operand asset key. Default: -1
   */
  public int getOperandAsset() {
    return TasksJNI.TransformRaster_getOperandAsset(swigCPtr, this);
  }

  /**
   *  Operand chunk key. Default: -1
   */
  public void setOperandChunk(int value) {
    TasksJNI.TransformRaster_setOperandChunk(swigCPtr, this, value);
  }

  /**
   *  Operand chunk key. Default: -1
   */
  public int getOperandChunk() {
    return TasksJNI.TransformRaster_getOperandChunk(swigCPtr, this);
  }

  /**
   *  Operand frame key. Default: -1
   */
  public void setOperandFrame(int value) {
    TasksJNI.TransformRaster_setOperandFrame(swigCPtr, this, value);
  }

  /**
   *  Operand frame key. Default: -1
   */
  public int getOperandFrame() {
    return TasksJNI.TransformRaster_getOperandFrame(swigCPtr, this);
  }

  /**
   *  Output projection.
   */
  public void setProjection(OrthoProjection value) {
    TasksJNI.TransformRaster_setProjection(swigCPtr, this, OrthoProjection.getCPtr(value), value);
  }

  /**
   *  Output projection.
   */
  public OrthoProjection getProjection() {
    return new OrthoProjection(TasksJNI.TransformRaster_getProjection(swigCPtr, this), true);
  }

  /**
   *  Region to be processed.
   */
  public void setRegion(BBox2d value) {
    TasksJNI.TransformRaster_setRegion(swigCPtr, this, BBox2d.getCPtr(value), value);
  }

  /**
   *  Region to be processed.
   */
  public BBox2d getRegion() {
    return new BBox2d(TasksJNI.TransformRaster_getRegion(swigCPtr, this), true);
  }

  /**
   *  Output resolution in meters. Default: 0.0
   */
  public void setResolution(double value) {
    TasksJNI.TransformRaster_setResolution(swigCPtr, this, value);
  }

  /**
   *  Output resolution in meters. Default: 0.0
   */
  public double getResolution() {
    return TasksJNI.TransformRaster_getResolution(swigCPtr, this);
  }

  /**
   *  Pixel size in the X dimension in projected units. Default: 0.0
   */
  public void setResolutionX(double value) {
    TasksJNI.TransformRaster_setResolutionX(swigCPtr, this, value);
  }

  /**
   *  Pixel size in the X dimension in projected units. Default: 0.0
   */
  public double getResolutionX() {
    return TasksJNI.TransformRaster_getResolutionX(swigCPtr, this);
  }

  /**
   *  Pixel size in the Y dimension in projected units. Default: 0.0
   */
  public void setResolutionY(double value) {
    TasksJNI.TransformRaster_setResolutionY(swigCPtr, this, value);
  }

  /**
   *  Pixel size in the Y dimension in projected units. Default: 0.0
   */
  public double getResolutionY() {
    return TasksJNI.TransformRaster_getResolutionY(swigCPtr, this);
  }

  /**
   *  Subtraction flag. Default: false
   */
  public void setSubtract(boolean value) {
    TasksJNI.TransformRaster_setSubtract(swigCPtr, this, value);
  }

  /**
   *  Subtraction flag. Default: false
   */
  public boolean getSubtract() {
    return TasksJNI.TransformRaster_getSubtract(swigCPtr, this);
  }

  /**
   *  Raster width. Default: 0
   */
  public void setWidth(int value) {
    TasksJNI.TransformRaster_setWidth(swigCPtr, this, value);
  }

  /**
   *  Raster width. Default: 0
   */
  public int getWidth() {
    return TasksJNI.TransformRaster_getWidth(swigCPtr, this);
  }

  /**
   *  2x3 raster-to-world transformation matrix.
   */
  public void setWorldTransform(Matrix2x3d value) {
    TasksJNI.TransformRaster_setWorldTransform(swigCPtr, this, Matrix2x3d.getCPtr(value), value);
  }

  /**
   *  2x3 raster-to-world transformation matrix.
   */
  public Matrix2x3d getWorldTransform() {
    return new Matrix2x3d(TasksJNI.TransformRaster_getWorldTransform(swigCPtr, this), true);
  }

}
