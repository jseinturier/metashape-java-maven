/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class GenerateMasks extends Task {
  private transient long swigCPtr;

  protected GenerateMasks(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.GenerateMasks_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GenerateMasks obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_GenerateMasks(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public GenerateMasks() {
    this(TasksJNI.new_GenerateMasks(), true);
  }

  /**
   *  Allowed blur radius on a photo in pix (only if mask_defocus=True). Default: 3.0
   */
  public void setBlurThreshold(double value) {
    TasksJNI.GenerateMasks_setBlurThreshold(swigCPtr, this, value);
  }

  /**
   *  Allowed blur radius on a photo in pix (only if mask_defocus=True). Default: 3.0
   */
  public double getBlurThreshold() {
    return TasksJNI.GenerateMasks_getBlurThreshold(swigCPtr, this);
  }

  /**
   *  Optional list of cameras to be processed.
   */
  public void setCameras(int[] value) {
    TasksJNI.GenerateMasks_setCameras(swigCPtr, this, value);
  }

  /**
   *  Optional list of cameras to be processed.
   */
  public int[] getCameras() { return TasksJNI.GenerateMasks_getCameras(swigCPtr, this); }

  /**
   *  Maximum depth of masked areas in meters (only if mask_defocus=False). Default: 3.4028234663852886e+38
   */
  public void setDepthThreshold(double value) {
    TasksJNI.GenerateMasks_setDepthThreshold(swigCPtr, this, value);
  }

  /**
   *  Maximum depth of masked areas in meters (only if mask_defocus=False). Default: 3.4028234663852886e+38
   */
  public double getDepthThreshold() {
    return TasksJNI.GenerateMasks_getDepthThreshold(swigCPtr, this);
  }

  /**
   *  Extend masks to cover whole mesh (only if mask_defocus=True). Default: false
   */
  public void setFixCoverage(boolean value) {
    TasksJNI.GenerateMasks_setFixCoverage(swigCPtr, this, value);
  }

  /**
   *  Extend masks to cover whole mesh (only if mask_defocus=True). Default: false
   */
  public boolean getFixCoverage() {
    return TasksJNI.GenerateMasks_getFixCoverage(swigCPtr, this);
  }

  /**
   *  Mask defocus areas. Default: false
   */
  public void setMaskDefocus(boolean value) {
    TasksJNI.GenerateMasks_setMaskDefocus(swigCPtr, this, value);
  }

  /**
   *  Mask defocus areas. Default: false
   */
  public boolean getMaskDefocus() {
    return TasksJNI.GenerateMasks_getMaskDefocus(swigCPtr, this);
  }

  /**
   *  Mask operation. Default: MaskOperation.MaskOperationReplacement
   */
  public void setMaskOperation(MaskOperation value) {
    TasksJNI.GenerateMasks_setMaskOperation(swigCPtr, this, value.ordinal());
  }

  /**
   *  Mask operation. Default: MaskOperation.MaskOperationReplacement
   */
  public MaskOperation getMaskOperation() {
    return MaskOperation.class.getEnumConstants()[TasksJNI.GenerateMasks_getMaskOperation(swigCPtr, this)];
  }

  /**
   *  Mask generation mode. Default: MaskingMode.MaskingModeAlpha
   */
  public void setMaskingMode(MaskingMode value) {
    TasksJNI.GenerateMasks_setMaskingMode(swigCPtr, this, value.ordinal());
  }

  /**
   *  Mask generation mode. Default: MaskingMode.MaskingModeAlpha
   */
  public MaskingMode getMaskingMode() {
    return MaskingMode.class.getEnumConstants()[TasksJNI.GenerateMasks_getMaskingMode(swigCPtr, this)];
  }

  /**
   *  Mask file name template.
   */
  public void setPath(String value) {
    TasksJNI.GenerateMasks_setPath(swigCPtr, this, value);
  }

  /**
   *  Mask file name template.
   */
  public String getPath() {
    return TasksJNI.GenerateMasks_getPath(swigCPtr, this);
  }

  /**
   *  Background masking tolerance. Default: 10
   */
  public void setTolerance(int value) {
    TasksJNI.GenerateMasks_setTolerance(swigCPtr, this, value);
  }

  /**
   *  Background masking tolerance. Default: 10
   */
  public int getTolerance() {
    return TasksJNI.GenerateMasks_getTolerance(swigCPtr, this);
  }

}
