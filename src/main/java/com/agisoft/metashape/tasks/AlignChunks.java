/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class AlignChunks extends Task {
  private transient long swigCPtr;

  protected AlignChunks(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.AlignChunks_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AlignChunks obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_AlignChunks(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public AlignChunks() {
    this(TasksJNI.new_AlignChunks(), true);
  }

  /**
   *  List of chunks to be aligned.
   */
  public void setChunks(int[] value) {
    TasksJNI.AlignChunks_setChunks(swigCPtr, this, value);
  }

  /**
   *  List of chunks to be aligned.
   */
  public int[] getChunks() { return TasksJNI.AlignChunks_getChunks(swigCPtr, this); }

  /**
   *  Alignment accuracy. Default: 1
   */
  public void setDownscale(int value) {
    TasksJNI.AlignChunks_setDownscale(swigCPtr, this, value);
  }

  /**
   *  Alignment accuracy. Default: 1
   */
  public int getDownscale() {
    return TasksJNI.AlignChunks_getDownscale(swigCPtr, this);
  }

  /**
   *  Filter points by mask. Default: false
   */
  public void setFilterMask(boolean value) {
    TasksJNI.AlignChunks_setFilterMask(swigCPtr, this, value);
  }

  /**
   *  Filter points by mask. Default: false
   */
  public boolean getFilterMask() {
    return TasksJNI.AlignChunks_getFilterMask(swigCPtr, this);
  }

  /**
   *  Fit chunk scale during alignment. Default: true
   */
  public void setFitScale(boolean value) {
    TasksJNI.AlignChunks_setFitScale(swigCPtr, this, value);
  }

  /**
   *  Fit chunk scale during alignment. Default: true
   */
  public boolean getFitScale() {
    return TasksJNI.AlignChunks_getFitScale(swigCPtr, this);
  }

  /**
   *  Enables image pair preselection. Default: false
   */
  public void setGenericPreselection(boolean value) {
    TasksJNI.AlignChunks_setGenericPreselection(swigCPtr, this, value);
  }

  /**
   *  Enables image pair preselection. Default: false
   */
  public boolean getGenericPreselection() {
    return TasksJNI.AlignChunks_getGenericPreselection(swigCPtr, this);
  }

  /**
   *  Maximum number of points for each photo. Default: 40000
   */
  public void setKeypointLimit(int value) {
    TasksJNI.AlignChunks_setKeypointLimit(swigCPtr, this, value);
  }

  /**
   *  Maximum number of points for each photo. Default: 40000
   */
  public int getKeypointLimit() {
    return TasksJNI.AlignChunks_getKeypointLimit(swigCPtr, this);
  }

  /**
   *  List of markers to be used for marker based alignment.
   */
  public void setMarkers(int[] value) {
    TasksJNI.AlignChunks_setMarkers(swigCPtr, this, value);
  }

  /**
   *  List of markers to be used for marker based alignment.
   */
  public int[] getMarkers() { return TasksJNI.AlignChunks_getMarkers(swigCPtr, this); }

  /**
   *  Apply mask filter to tie points. Default: false
   */
  public void setMaskTiepoints(boolean value) {
    TasksJNI.AlignChunks_setMaskTiepoints(swigCPtr, this, value);
  }

  /**
   *  Apply mask filter to tie points. Default: false
   */
  public boolean getMaskTiepoints() {
    return TasksJNI.AlignChunks_getMaskTiepoints(swigCPtr, this);
  }

  /**
   *  Alignment method. Default: 0
   */
  public void setMethod(int value) {
    TasksJNI.AlignChunks_setMethod(swigCPtr, this, value);
  }

  /**
   *  Alignment method. Default: 0
   */
  public int getMethod() {
    return TasksJNI.AlignChunks_getMethod(swigCPtr, this);
  }

  /**
   *  Chunk to be used as a reference. Default: -1
   */
  public void setReference(int value) {
    TasksJNI.AlignChunks_setReference(swigCPtr, this, value);
  }

  /**
   *  Chunk to be used as a reference. Default: -1
   */
  public int getReference() {
    return TasksJNI.AlignChunks_getReference(swigCPtr, this);
  }

}
