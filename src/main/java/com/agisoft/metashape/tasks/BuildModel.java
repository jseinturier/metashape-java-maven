/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class BuildModel extends Task {
  private transient long swigCPtr;

  protected BuildModel(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.BuildModel_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BuildModel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_BuildModel(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BuildModel() {
    this(TasksJNI.new_BuildModel(), true);
  }

  /**
   *  List of cameras to process.
   */
  public void setCameras(int[] value) {
    TasksJNI.BuildModel_setCameras(swigCPtr, this, value);
  }

  /**
   *  List of cameras to process.
   */
  public int[] getCameras() { return TasksJNI.BuildModel_getCameras(swigCPtr, this); }

  /**
   *  List of dense point classes to be used for surface extraction.
   */
  public void setClasses(int[] value) {
    TasksJNI.BuildModel_setClasses(swigCPtr, this, value);
  }

  /**
   *  List of dense point classes to be used for surface extraction.
   */
  public int[] getClasses() { return TasksJNI.BuildModel_getClasses(swigCPtr, this); }

  /**
   *  Target face count. Default: FaceCount.HighFaceCount
   */
  public void setFaceCount(FaceCount value) {
    TasksJNI.BuildModel_setFaceCount(swigCPtr, this, value.ordinal());
  }

  /**
   *  Target face count. Default: FaceCount.HighFaceCount
   */
  public FaceCount getFaceCount() {
    return FaceCount.class.getEnumConstants()[TasksJNI.BuildModel_getFaceCount(swigCPtr, this)];
  }

  /**
   *  Custom face count. Default: 200000
   */
  public void setFaceCountCustom(int value) {
    TasksJNI.BuildModel_setFaceCountCustom(swigCPtr, this, value);
  }

  /**
   *  Custom face count. Default: 200000
   */
  public int getFaceCountCustom() {
    return TasksJNI.BuildModel_getFaceCountCustom(swigCPtr, this);
  }

  /**
   *  Interpolation mode. Default: Interpolation.EnabledInterpolation
   */
  public void setInterpolation(Interpolation value) {
    TasksJNI.BuildModel_setInterpolation(swigCPtr, this, value.ordinal());
  }

  /**
   *  Interpolation mode. Default: Interpolation.EnabledInterpolation
   */
  public Interpolation getInterpolation() {
    return Interpolation.class.getEnumConstants()[TasksJNI.BuildModel_getInterpolation(swigCPtr, this)];
  }

  /**
   *  Enable store depth maps option. Default: true
   */
  public void setKeepDepth(boolean value) {
    TasksJNI.BuildModel_setKeepDepth(swigCPtr, this, value);
  }

  /**
   *  Enable store depth maps option. Default: true
   */
  public boolean getKeepDepth() {
    return TasksJNI.BuildModel_getKeepDepth(swigCPtr, this);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public void setMaxWorkgroupSize(int value) {
    TasksJNI.BuildModel_setMaxWorkgroupSize(swigCPtr, this, value);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public int getMaxWorkgroupSize() {
    return TasksJNI.BuildModel_getMaxWorkgroupSize(swigCPtr, this);
  }

  /**
   *  Selects between dense point cloud, sparse point cloud and depth maps. Default: DataSource.DenseCloudData
   */
  public void setSourceData(DataSource value) {
    TasksJNI.BuildModel_setSourceData(swigCPtr, this, value.ordinal());
  }

  /**
   *  Selects between dense point cloud, sparse point cloud and depth maps. Default: DataSource.DenseCloudData
   */
  public DataSource getSourceData() {
    return DataSource.class.getEnumConstants()[TasksJNI.BuildModel_getSourceData(swigCPtr, this)];
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public void setSubdivideTask(boolean value) {
    TasksJNI.BuildModel_setSubdivideTask(swigCPtr, this, value);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public boolean getSubdivideTask() {
    return TasksJNI.BuildModel_getSubdivideTask(swigCPtr, this);
  }

  /**
   *  Type of object to be reconstructed. Default: SurfaceType.Arbitrary
   */
  public void setSurfaceType(SurfaceType value) {
    TasksJNI.BuildModel_setSurfaceType(swigCPtr, this, value.ordinal());
  }

  /**
   *  Type of object to be reconstructed. Default: SurfaceType.Arbitrary
   */
  public SurfaceType getSurfaceType() {
    return SurfaceType.class.getEnumConstants()[TasksJNI.BuildModel_getSurfaceType(swigCPtr, this)];
  }

  /**
   *  Trimming radius (no trimming if zero). Default: 10
   */
  public void setTrimmingRadius(int value) {
    TasksJNI.BuildModel_setTrimmingRadius(swigCPtr, this, value);
  }

  /**
   *  Trimming radius (no trimming if zero). Default: 10
   */
  public int getTrimmingRadius() {
    return TasksJNI.BuildModel_getTrimmingRadius(swigCPtr, this);
  }

  /**
   *  Enable vertex colors calculation. Default: true
   */
  public void setVertexColors(boolean value) {
    TasksJNI.BuildModel_setVertexColors(swigCPtr, this, value);
  }

  /**
   *  Enable vertex colors calculation. Default: true
   */
  public boolean getVertexColors() {
    return TasksJNI.BuildModel_getVertexColors(swigCPtr, this);
  }

  /**
   *  Enable vertex confidence calculation. Default: true
   */
  public void setVertexConfidence(boolean value) {
    TasksJNI.BuildModel_setVertexConfidence(swigCPtr, this, value);
  }

  /**
   *  Enable vertex confidence calculation. Default: true
   */
  public boolean getVertexConfidence() {
    return TasksJNI.BuildModel_getVertexConfidence(swigCPtr, this);
  }

  /**
   *  Enable strict volumetric masking. Default: false
   */
  public void setVolumetricMasks(boolean value) {
    TasksJNI.BuildModel_setVolumetricMasks(swigCPtr, this, value);
  }

  /**
   *  Enable strict volumetric masking. Default: false
   */
  public boolean getVolumetricMasks() {
    return TasksJNI.BuildModel_getVolumetricMasks(swigCPtr, this);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public void setWorkitemSizeCameras(int value) {
    TasksJNI.BuildModel_setWorkitemSizeCameras(swigCPtr, this, value);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public int getWorkitemSizeCameras() {
    return TasksJNI.BuildModel_getWorkitemSizeCameras(swigCPtr, this);
  }

}
