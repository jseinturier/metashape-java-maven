/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class DetectMarkers extends Task {
  private transient long swigCPtr;

  protected DetectMarkers(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.DetectMarkers_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DetectMarkers obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_DetectMarkers(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DetectMarkers() {
    this(TasksJNI.new_DetectMarkers(), true);
  }

  /**
   *  List of cameras to process.
   */
  public void setCameras(int[] value) {
    TasksJNI.DetectMarkers_setCameras(swigCPtr, this, value);
  }

  /**
   *  List of cameras to process.
   */
  public int[] getCameras() { return TasksJNI.DetectMarkers_getCameras(swigCPtr, this); }

  /**
   *  Ignore masked image regions. Default: false
   */
  public void setFilterMask(boolean value) {
    TasksJNI.DetectMarkers_setFilterMask(swigCPtr, this, value);
  }

  /**
   *  Ignore masked image regions. Default: false
   */
  public boolean getFilterMask() {
    return TasksJNI.DetectMarkers_getFilterMask(swigCPtr, this);
  }

  /**
   *  List of frames to process.
   */
  public void setFrames(int[] value) {
    TasksJNI.DetectMarkers_setFrames(swigCPtr, this, value);
  }

  /**
   *  List of frames to process.
   */
  public int[] getFrames() { return TasksJNI.DetectMarkers_getFrames(swigCPtr, this); }

  /**
   *  Detect markers on black background. Default: false
   */
  public void setInverted(boolean value) {
    TasksJNI.DetectMarkers_setInverted(swigCPtr, this, value);
  }

  /**
   *  Detect markers on black background. Default: false
   */
  public boolean getInverted() {
    return TasksJNI.DetectMarkers_getInverted(swigCPtr, this);
  }

  /**
   *  Maximum residual for non-coded targets in pixels. Default: 5.0
   */
  public void setMaximumResidual(double value) {
    TasksJNI.DetectMarkers_setMaximumResidual(swigCPtr, this, value);
  }

  /**
   *  Maximum residual for non-coded targets in pixels. Default: 5.0
   */
  public double getMaximumResidual() {
    return TasksJNI.DetectMarkers_getMaximumResidual(swigCPtr, this);
  }

  /**
   *  Minimum distance between targets in pixels (CrossTarget type only). Default: 5
   */
  public void setMinimumDist(int value) {
    TasksJNI.DetectMarkers_setMinimumDist(swigCPtr, this, value);
  }

  /**
   *  Minimum distance between targets in pixels (CrossTarget type only). Default: 5
   */
  public int getMinimumDist() {
    return TasksJNI.DetectMarkers_getMinimumDist(swigCPtr, this);
  }

  /**
   *  Minimum target radius in pixels to be detected (CrossTarget type only). Default: 0
   */
  public void setMinimumSize(int value) {
    TasksJNI.DetectMarkers_setMinimumSize(swigCPtr, this, value);
  }

  /**
   *  Minimum target radius in pixels to be detected (CrossTarget type only). Default: 0
   */
  public int getMinimumSize() {
    return TasksJNI.DetectMarkers_getMinimumSize(swigCPtr, this);
  }

  /**
   *  Disable parity checking. Default: false
   */
  public void setNoparity(boolean value) {
    TasksJNI.DetectMarkers_setNoparity(swigCPtr, this, value);
  }

  /**
   *  Disable parity checking. Default: false
   */
  public boolean getNoparity() {
    return TasksJNI.DetectMarkers_getNoparity(swigCPtr, this);
  }

  /**
   *  Type of targets. Default: TargetType.CircularTarget12bit
   */
  public void setTargetType(TargetType value) {
    TasksJNI.DetectMarkers_setTargetType(swigCPtr, this, value.ordinal());
  }

  /**
   *  Type of targets. Default: TargetType.CircularTarget12bit
   */
  public TargetType getTargetType() {
    return TargetType.class.getEnumConstants()[TasksJNI.DetectMarkers_getTargetType(swigCPtr, this)];
  }

  /**
   *  Detector tolerance (0 - 100). Default: 50
   */
  public void setTolerance(int value) {
    TasksJNI.DetectMarkers_setTolerance(swigCPtr, this, value);
  }

  /**
   *  Detector tolerance (0 - 100). Default: 50
   */
  public int getTolerance() {
    return TasksJNI.DetectMarkers_getTolerance(swigCPtr, this);
  }

}
