/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class CalibrateLens extends Task {
  private transient long swigCPtr;

  protected CalibrateLens(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.CalibrateLens_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CalibrateLens obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_CalibrateLens(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public CalibrateLens() {
    this(TasksJNI.new_CalibrateLens(), true);
  }

  /**
   *  Border size to ignore. Default: 10
   */
  public void setBorder(int value) {
    TasksJNI.CalibrateLens_setBorder(swigCPtr, this, value);
  }

  /**
   *  Border size to ignore. Default: 10
   */
  public int getBorder() {
    return TasksJNI.CalibrateLens_getBorder(swigCPtr, this);
  }

  /**
   *  Enable optimization of aspect ratio. Default: true
   */
  public void setFitB1(boolean value) {
    TasksJNI.CalibrateLens_setFitB1(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of aspect ratio. Default: true
   */
  public boolean getFitB1() {
    return TasksJNI.CalibrateLens_getFitB1(swigCPtr, this);
  }

  /**
   *  Enable optimization of skew coefficient. Default: false
   */
  public void setFitB2(boolean value) {
    TasksJNI.CalibrateLens_setFitB2(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of skew coefficient. Default: false
   */
  public boolean getFitB2() {
    return TasksJNI.CalibrateLens_getFitB2(swigCPtr, this);
  }

  /**
   *  Enable optimization of principal point coordinates. Default: true
   */
  public void setFitCxcy(boolean value) {
    TasksJNI.CalibrateLens_setFitCxcy(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of principal point coordinates. Default: true
   */
  public boolean getFitCxcy() {
    return TasksJNI.CalibrateLens_getFitCxcy(swigCPtr, this);
  }

  /**
   *  Enable optimization of focal length coefficient. Default: true
   */
  public void setFitF(boolean value) {
    TasksJNI.CalibrateLens_setFitF(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of focal length coefficient. Default: true
   */
  public boolean getFitF() {
    return TasksJNI.CalibrateLens_getFitF(swigCPtr, this);
  }

  /**
   *  Enable optimization of k1 radial distortion coefficient. Default: true
   */
  public void setFitK1(boolean value) {
    TasksJNI.CalibrateLens_setFitK1(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of k1 radial distortion coefficient. Default: true
   */
  public boolean getFitK1() {
    return TasksJNI.CalibrateLens_getFitK1(swigCPtr, this);
  }

  /**
   *  Enable optimization of k2 radial distortion coefficient. Default: true
   */
  public void setFitK2(boolean value) {
    TasksJNI.CalibrateLens_setFitK2(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of k2 radial distortion coefficient. Default: true
   */
  public boolean getFitK2() {
    return TasksJNI.CalibrateLens_getFitK2(swigCPtr, this);
  }

  /**
   *  Enable optimization of k3 radial distortion coefficient. Default: true
   */
  public void setFitK3(boolean value) {
    TasksJNI.CalibrateLens_setFitK3(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of k3 radial distortion coefficient. Default: true
   */
  public boolean getFitK3() {
    return TasksJNI.CalibrateLens_getFitK3(swigCPtr, this);
  }

  /**
   *  Enable optimization of k4 radial distortion coefficient. Default: false
   */
  public void setFitK4(boolean value) {
    TasksJNI.CalibrateLens_setFitK4(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of k4 radial distortion coefficient. Default: false
   */
  public boolean getFitK4() {
    return TasksJNI.CalibrateLens_getFitK4(swigCPtr, this);
  }

  /**
   *  Enable optimization of p1 tangential distortion coefficient. Default: false
   */
  public void setFitP1(boolean value) {
    TasksJNI.CalibrateLens_setFitP1(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of p1 tangential distortion coefficient. Default: false
   */
  public boolean getFitP1() {
    return TasksJNI.CalibrateLens_getFitP1(swigCPtr, this);
  }

  /**
   *  Enable optimization of p2 tangential distortion coefficient. Default: false
   */
  public void setFitP2(boolean value) {
    TasksJNI.CalibrateLens_setFitP2(swigCPtr, this, value);
  }

  /**
   *  Enable optimization of p2 tangential distortion coefficient. Default: false
   */
  public boolean getFitP2() {
    return TasksJNI.CalibrateLens_getFitP2(swigCPtr, this);
  }

}
