/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class BuildOrthomosaic extends Task {
  private transient long swigCPtr;

  protected BuildOrthomosaic(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.BuildOrthomosaic_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BuildOrthomosaic obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_BuildOrthomosaic(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BuildOrthomosaic() {
    this(TasksJNI.new_BuildOrthomosaic(), true);
  }

  /**
   *  Orthophoto blending mode. Default: BlendingMode.MosaicBlending
   */
  public void setBlendingMode(BlendingMode value) {
    TasksJNI.BuildOrthomosaic_setBlendingMode(swigCPtr, this, value.ordinal());
  }

  /**
   *  Orthophoto blending mode. Default: BlendingMode.MosaicBlending
   */
  public BlendingMode getBlendingMode() {
    return BlendingMode.class.getEnumConstants()[TasksJNI.BuildOrthomosaic_getBlendingMode(swigCPtr, this)];
  }

  /**
   *  Enable back-face culling. Default: false
   */
  public void setCullFaces(boolean value) {
    TasksJNI.BuildOrthomosaic_setCullFaces(swigCPtr, this, value);
  }

  /**
   *  Enable back-face culling. Default: false
   */
  public boolean getCullFaces() {
    return TasksJNI.BuildOrthomosaic_getCullFaces(swigCPtr, this);
  }

  /**
   *  Enable hole filling. Default: true
   */
  public void setFillHoles(boolean value) {
    TasksJNI.BuildOrthomosaic_setFillHoles(swigCPtr, this, value);
  }

  /**
   *  Enable hole filling. Default: true
   */
  public boolean getFillHoles() {
    return TasksJNI.BuildOrthomosaic_getFillHoles(swigCPtr, this);
  }

  /**
   *  Flip X axis direction. Default: false
   */
  public void setFlipX(boolean value) {
    TasksJNI.BuildOrthomosaic_setFlipX(swigCPtr, this, value);
  }

  /**
   *  Flip X axis direction. Default: false
   */
  public boolean getFlipX() {
    return TasksJNI.BuildOrthomosaic_getFlipX(swigCPtr, this);
  }

  /**
   *  Flip Y axis direction. Default: false
   */
  public void setFlipY(boolean value) {
    TasksJNI.BuildOrthomosaic_setFlipY(swigCPtr, this, value);
  }

  /**
   *  Flip Y axis direction. Default: false
   */
  public boolean getFlipY() {
    return TasksJNI.BuildOrthomosaic_getFlipY(swigCPtr, this);
  }

  /**
   *  Flip Z axis direction. Default: false
   */
  public void setFlipZ(boolean value) {
    TasksJNI.BuildOrthomosaic_setFlipZ(swigCPtr, this, value);
  }

  /**
   *  Flip Z axis direction. Default: false
   */
  public boolean getFlipZ() {
    return TasksJNI.BuildOrthomosaic_getFlipZ(swigCPtr, this);
  }

  /**
   *  Enable ghosting filter. Default: false
   */
  public void setGhostingFilter(boolean value) {
    TasksJNI.BuildOrthomosaic_setGhostingFilter(swigCPtr, this, value);
  }

  /**
   *  Enable ghosting filter. Default: false
   */
  public boolean getGhostingFilter() {
    return TasksJNI.BuildOrthomosaic_getGhostingFilter(swigCPtr, this);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public void setMaxWorkgroupSize(int value) {
    TasksJNI.BuildOrthomosaic_setMaxWorkgroupSize(swigCPtr, this, value);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public int getMaxWorkgroupSize() {
    return TasksJNI.BuildOrthomosaic_getMaxWorkgroupSize(swigCPtr, this);
  }

  /**
   *  Output projection.
   */
  public void setProjection(OrthoProjection value) {
    TasksJNI.BuildOrthomosaic_setProjection(swigCPtr, this, OrthoProjection.getCPtr(value), value);
  }

  /**
   *  Output projection.
   */
  public OrthoProjection getProjection() {
    return new OrthoProjection(TasksJNI.BuildOrthomosaic_getProjection(swigCPtr, this), true);
  }

  /**
   *  Refine seamlines based on image content. Default: false
   */
  public void setRefineSeamlines(boolean value) {
    TasksJNI.BuildOrthomosaic_setRefineSeamlines(swigCPtr, this, value);
  }

  /**
   *  Refine seamlines based on image content. Default: false
   */
  public boolean getRefineSeamlines() {
    return TasksJNI.BuildOrthomosaic_getRefineSeamlines(swigCPtr, this);
  }

  /**
   *  Region to be processed.
   */
  public void setRegion(BBox2d value) {
    TasksJNI.BuildOrthomosaic_setRegion(swigCPtr, this, BBox2d.getCPtr(value), value);
  }

  /**
   *  Region to be processed.
   */
  public BBox2d getRegion() {
    return new BBox2d(TasksJNI.BuildOrthomosaic_getRegion(swigCPtr, this), true);
  }

  /**
   *  Pixel size in meters. Default: 0.0
   */
  public void setResolution(double value) {
    TasksJNI.BuildOrthomosaic_setResolution(swigCPtr, this, value);
  }

  /**
   *  Pixel size in meters. Default: 0.0
   */
  public double getResolution() {
    return TasksJNI.BuildOrthomosaic_getResolution(swigCPtr, this);
  }

  /**
   *  Pixel size in the X dimension in projected units. Default: 0.0
   */
  public void setResolutionX(double value) {
    TasksJNI.BuildOrthomosaic_setResolutionX(swigCPtr, this, value);
  }

  /**
   *  Pixel size in the X dimension in projected units. Default: 0.0
   */
  public double getResolutionX() {
    return TasksJNI.BuildOrthomosaic_getResolutionX(swigCPtr, this);
  }

  /**
   *  Pixel size in the Y dimension in projected units. Default: 0.0
   */
  public void setResolutionY(double value) {
    TasksJNI.BuildOrthomosaic_setResolutionY(swigCPtr, this, value);
  }

  /**
   *  Pixel size in the Y dimension in projected units. Default: 0.0
   */
  public double getResolutionY() {
    return TasksJNI.BuildOrthomosaic_getResolutionY(swigCPtr, this);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public void setSubdivideTask(boolean value) {
    TasksJNI.BuildOrthomosaic_setSubdivideTask(swigCPtr, this, value);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public boolean getSubdivideTask() {
    return TasksJNI.BuildOrthomosaic_getSubdivideTask(swigCPtr, this);
  }

  /**
   *  Orthorectification surface. Default: DataSource.ModelData
   */
  public void setSurfaceData(DataSource value) {
    TasksJNI.BuildOrthomosaic_setSurfaceData(swigCPtr, this, value.ordinal());
  }

  /**
   *  Orthorectification surface. Default: DataSource.ModelData
   */
  public DataSource getSurfaceData() {
    return DataSource.class.getEnumConstants()[TasksJNI.BuildOrthomosaic_getSurfaceData(swigCPtr, this)];
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public void setWorkitemSizeCameras(int value) {
    TasksJNI.BuildOrthomosaic_setWorkitemSizeCameras(swigCPtr, this, value);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public int getWorkitemSizeCameras() {
    return TasksJNI.BuildOrthomosaic_getWorkitemSizeCameras(swigCPtr, this);
  }

  /**
   *  Number of tiles in a workitem. Default: 10
   */
  public void setWorkitemSizeTiles(int value) {
    TasksJNI.BuildOrthomosaic_setWorkitemSizeTiles(swigCPtr, this, value);
  }

  /**
   *  Number of tiles in a workitem. Default: 10
   */
  public int getWorkitemSizeTiles() {
    return TasksJNI.BuildOrthomosaic_getWorkitemSizeTiles(swigCPtr, this);
  }

}
