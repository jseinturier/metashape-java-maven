/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class BuildDepthMaps extends Task {
  private transient long swigCPtr;

  protected BuildDepthMaps(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.BuildDepthMaps_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BuildDepthMaps obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_BuildDepthMaps(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BuildDepthMaps() {
    this(TasksJNI.new_BuildDepthMaps(), true);
  }

  /**
   *  List of cameras to process.
   */
  public void setCameras(int[] value) {
    TasksJNI.BuildDepthMaps_setCameras(swigCPtr, this, value);
  }

  /**
   *  List of cameras to process.
   */
  public int[] getCameras() { return TasksJNI.BuildDepthMaps_getCameras(swigCPtr, this); }

  /**
   *  Depth map quality. Default: 4
   */
  public void setDownscale(int value) {
    TasksJNI.BuildDepthMaps_setDownscale(swigCPtr, this, value);
  }

  /**
   *  Depth map quality. Default: 4
   */
  public int getDownscale() {
    return TasksJNI.BuildDepthMaps_getDownscale(swigCPtr, this);
  }

  /**
   *  Depth map filtering mode. Default: FilterMode.MildFiltering
   */
  public void setFilterMode(FilterMode value) {
    TasksJNI.BuildDepthMaps_setFilterMode(swigCPtr, this, value.ordinal());
  }

  /**
   *  Depth map filtering mode. Default: FilterMode.MildFiltering
   */
  public FilterMode getFilterMode() {
    return FilterMode.class.getEnumConstants()[TasksJNI.BuildDepthMaps_getFilterMode(swigCPtr, this)];
  }

  /**
   *  Maximum number of neighbor images to use for depth map generation. Default: 40
   */
  public void setMaxNeighbors(int value) {
    TasksJNI.BuildDepthMaps_setMaxNeighbors(swigCPtr, this, value);
  }

  /**
   *  Maximum number of neighbor images to use for depth map generation. Default: 40
   */
  public int getMaxNeighbors() {
    return TasksJNI.BuildDepthMaps_getMaxNeighbors(swigCPtr, this);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public void setMaxWorkgroupSize(int value) {
    TasksJNI.BuildDepthMaps_setMaxWorkgroupSize(swigCPtr, this, value);
  }

  /**
   *  Maximum workgroup size. Default: 100
   */
  public int getMaxWorkgroupSize() {
    return TasksJNI.BuildDepthMaps_getMaxWorkgroupSize(swigCPtr, this);
  }

  /**
   *  Enable reuse depth maps option. Default: false
   */
  public void setReuseDepth(boolean value) {
    TasksJNI.BuildDepthMaps_setReuseDepth(swigCPtr, this, value);
  }

  /**
   *  Enable reuse depth maps option. Default: false
   */
  public boolean getReuseDepth() {
    return TasksJNI.BuildDepthMaps_getReuseDepth(swigCPtr, this);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public void setSubdivideTask(boolean value) {
    TasksJNI.BuildDepthMaps_setSubdivideTask(swigCPtr, this, value);
  }

  /**
   *  Enable fine-level task subdivision. Default: true
   */
  public boolean getSubdivideTask() {
    return TasksJNI.BuildDepthMaps_getSubdivideTask(swigCPtr, this);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public void setWorkitemSizeCameras(int value) {
    TasksJNI.BuildDepthMaps_setWorkitemSizeCameras(swigCPtr, this, value);
  }

  /**
   *  Number of cameras in a workitem. Default: 20
   */
  public int getWorkitemSizeCameras() {
    return TasksJNI.BuildDepthMaps_getWorkitemSizeCameras(swigCPtr, this);
  }

}
