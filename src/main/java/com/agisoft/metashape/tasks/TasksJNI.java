/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

public class TasksJNI {
  public final static native long new_Task__SWIG_0(long jarg1, Task jarg1_);
  public final static native long new_Task__SWIG_1(String jarg1);
  public final static native String Task_getName(long jarg1, Task jarg1_);
  public final static native String[] Task_getParameterNames(long jarg1, Task jarg1_);
  public final static native void Task_setParameter(long jarg1, Task jarg1_, String jarg2, long jarg3, Variant jarg3_);
  public final static native long Task_getParameter(long jarg1, Task jarg1_, String jarg2);
  public final static native int Task_getTarget(long jarg1, Task jarg1_);
  public final static native boolean Task_isGPUSupported(long jarg1, Task jarg1_);
  public final static native int Task_getWorkitemCount(long jarg1, Task jarg1_);
  public final static native void Task_setWorkitemCount(long jarg1, Task jarg1_, int jarg2);
  public final static native long Task_toNetworkTask__SWIG_0(long jarg1, Task jarg1_);
  public final static native long Task_toNetworkTask__SWIG_1(long jarg1, Task jarg1_, long jarg2, Chunk jarg2_);
  public final static native long Task_toNetworkTask__SWIG_2(long jarg1, Task jarg1_, long[] jarg2);
  public final static native long Task_toNetworkTask__SWIG_3(long jarg1, Task jarg1_, long jarg2, Document jarg2_);
  public final static native void Task_apply__SWIG_0(long jarg1, Task jarg1_, long jarg2, Chunk jarg2_, Progress jarg3);
  public final static native void Task_apply__SWIG_1(long jarg1, Task jarg1_, long jarg2, Document jarg2_, Progress jarg3);
  public final static native void delete_Task(long jarg1);
  public final static native long new_AddFrames();
  public final static native void AddFrames_setChunk(long jarg1, AddFrames jarg1_, int jarg2);
  public final static native int AddFrames_getChunk(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setCopyDenseCloud(long jarg1, AddFrames jarg1_, boolean jarg2);
  public final static native boolean AddFrames_getCopyDenseCloud(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setCopyDepthMaps(long jarg1, AddFrames jarg1_, boolean jarg2);
  public final static native boolean AddFrames_getCopyDepthMaps(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setCopyElevation(long jarg1, AddFrames jarg1_, boolean jarg2);
  public final static native boolean AddFrames_getCopyElevation(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setCopyModel(long jarg1, AddFrames jarg1_, boolean jarg2);
  public final static native boolean AddFrames_getCopyModel(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setCopyOrthomosaic(long jarg1, AddFrames jarg1_, boolean jarg2);
  public final static native boolean AddFrames_getCopyOrthomosaic(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setCopyTiledModel(long jarg1, AddFrames jarg1_, boolean jarg2);
  public final static native boolean AddFrames_getCopyTiledModel(long jarg1, AddFrames jarg1_);
  public final static native void AddFrames_setFrames(long jarg1, AddFrames jarg1_, int[] jarg2);
  public final static native int[] AddFrames_getFrames(long jarg1, AddFrames jarg1_);
  public final static native void delete_AddFrames(long jarg1);
  public final static native long new_AddPhotos();
  public final static native void AddPhotos_setFilegroups(long jarg1, AddPhotos jarg1_, int[] jarg2);
  public final static native int[] AddPhotos_getFilegroups(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setFilenames(long jarg1, AddPhotos jarg1_, String[] jarg2);
  public final static native String[] AddPhotos_getFilenames(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setGroup(long jarg1, AddPhotos jarg1_, int jarg2);
  public final static native int AddPhotos_getGroup(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLayout(long jarg1, AddPhotos jarg1_, int jarg2);
  public final static native int AddPhotos_getLayout(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLoadReference(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getLoadReference(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLoadRpcTxt(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getLoadRpcTxt(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLoadXmpAccuracy(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getLoadXmpAccuracy(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLoadXmpAntenna(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getLoadXmpAntenna(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLoadXmpCalibration(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getLoadXmpCalibration(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setLoadXmpOrientation(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getLoadXmpOrientation(long jarg1, AddPhotos jarg1_);
  public final static native void AddPhotos_setStripExtensions(long jarg1, AddPhotos jarg1_, boolean jarg2);
  public final static native boolean AddPhotos_getStripExtensions(long jarg1, AddPhotos jarg1_);
  public final static native void delete_AddPhotos(long jarg1);
  public final static native long new_AlignCameras();
  public final static native void AlignCameras_setAdaptiveFitting(long jarg1, AlignCameras jarg1_, boolean jarg2);
  public final static native boolean AlignCameras_getAdaptiveFitting(long jarg1, AlignCameras jarg1_);
  public final static native void AlignCameras_setCameras(long jarg1, AlignCameras jarg1_, int[] jarg2);
  public final static native int[] AlignCameras_getCameras(long jarg1, AlignCameras jarg1_);
  public final static native void AlignCameras_setMinImage(long jarg1, AlignCameras jarg1_, int jarg2);
  public final static native int AlignCameras_getMinImage(long jarg1, AlignCameras jarg1_);
  public final static native void AlignCameras_setResetAlignment(long jarg1, AlignCameras jarg1_, boolean jarg2);
  public final static native boolean AlignCameras_getResetAlignment(long jarg1, AlignCameras jarg1_);
  public final static native void AlignCameras_setSubdivideTask(long jarg1, AlignCameras jarg1_, boolean jarg2);
  public final static native boolean AlignCameras_getSubdivideTask(long jarg1, AlignCameras jarg1_);
  public final static native void delete_AlignCameras(long jarg1);
  public final static native long new_AlignChunks();
  public final static native void AlignChunks_setChunks(long jarg1, AlignChunks jarg1_, int[] jarg2);
  public final static native int[] AlignChunks_getChunks(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setDownscale(long jarg1, AlignChunks jarg1_, int jarg2);
  public final static native int AlignChunks_getDownscale(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setFilterMask(long jarg1, AlignChunks jarg1_, boolean jarg2);
  public final static native boolean AlignChunks_getFilterMask(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setFitScale(long jarg1, AlignChunks jarg1_, boolean jarg2);
  public final static native boolean AlignChunks_getFitScale(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setGenericPreselection(long jarg1, AlignChunks jarg1_, boolean jarg2);
  public final static native boolean AlignChunks_getGenericPreselection(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setKeypointLimit(long jarg1, AlignChunks jarg1_, int jarg2);
  public final static native int AlignChunks_getKeypointLimit(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setMarkers(long jarg1, AlignChunks jarg1_, int[] jarg2);
  public final static native int[] AlignChunks_getMarkers(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setMaskTiepoints(long jarg1, AlignChunks jarg1_, boolean jarg2);
  public final static native boolean AlignChunks_getMaskTiepoints(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setMethod(long jarg1, AlignChunks jarg1_, int jarg2);
  public final static native int AlignChunks_getMethod(long jarg1, AlignChunks jarg1_);
  public final static native void AlignChunks_setReference(long jarg1, AlignChunks jarg1_, int jarg2);
  public final static native int AlignChunks_getReference(long jarg1, AlignChunks jarg1_);
  public final static native void delete_AlignChunks(long jarg1);
  public final static native long new_AnalyzePhotos();
  public final static native void AnalyzePhotos_setCameras(long jarg1, AnalyzePhotos jarg1_, int[] jarg2);
  public final static native int[] AnalyzePhotos_getCameras(long jarg1, AnalyzePhotos jarg1_);
  public final static native void AnalyzePhotos_setFilterMask(long jarg1, AnalyzePhotos jarg1_, boolean jarg2);
  public final static native boolean AnalyzePhotos_getFilterMask(long jarg1, AnalyzePhotos jarg1_);
  public final static native void delete_AnalyzePhotos(long jarg1);
  public final static native long new_BuildContours();
  public final static native void BuildContours_setInterval(long jarg1, BuildContours jarg1_, double jarg2);
  public final static native double BuildContours_getInterval(long jarg1, BuildContours jarg1_);
  public final static native void BuildContours_setMaxValue(long jarg1, BuildContours jarg1_, double jarg2);
  public final static native double BuildContours_getMaxValue(long jarg1, BuildContours jarg1_);
  public final static native void BuildContours_setMinValue(long jarg1, BuildContours jarg1_, double jarg2);
  public final static native double BuildContours_getMinValue(long jarg1, BuildContours jarg1_);
  public final static native void BuildContours_setPreventIntersections(long jarg1, BuildContours jarg1_, boolean jarg2);
  public final static native boolean BuildContours_getPreventIntersections(long jarg1, BuildContours jarg1_);
  public final static native void BuildContours_setSourceData(long jarg1, BuildContours jarg1_, int jarg2);
  public final static native int BuildContours_getSourceData(long jarg1, BuildContours jarg1_);
  public final static native void delete_BuildContours(long jarg1);
  public final static native long new_BuildDem();
  public final static native void BuildDem_setClasses(long jarg1, BuildDem jarg1_, int[] jarg2);
  public final static native int[] BuildDem_getClasses(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setFlipX(long jarg1, BuildDem jarg1_, boolean jarg2);
  public final static native boolean BuildDem_getFlipX(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setFlipY(long jarg1, BuildDem jarg1_, boolean jarg2);
  public final static native boolean BuildDem_getFlipY(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setFlipZ(long jarg1, BuildDem jarg1_, boolean jarg2);
  public final static native boolean BuildDem_getFlipZ(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setInterpolation(long jarg1, BuildDem jarg1_, int jarg2);
  public final static native int BuildDem_getInterpolation(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setMaxWorkgroupSize(long jarg1, BuildDem jarg1_, int jarg2);
  public final static native int BuildDem_getMaxWorkgroupSize(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setProjection(long jarg1, BuildDem jarg1_, long jarg2, OrthoProjection jarg2_);
  public final static native long BuildDem_getProjection(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setRegion(long jarg1, BuildDem jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long BuildDem_getRegion(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setResolution(long jarg1, BuildDem jarg1_, double jarg2);
  public final static native double BuildDem_getResolution(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setSourceData(long jarg1, BuildDem jarg1_, int jarg2);
  public final static native int BuildDem_getSourceData(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setSubdivideTask(long jarg1, BuildDem jarg1_, boolean jarg2);
  public final static native boolean BuildDem_getSubdivideTask(long jarg1, BuildDem jarg1_);
  public final static native void BuildDem_setWorkitemSizeTiles(long jarg1, BuildDem jarg1_, int jarg2);
  public final static native int BuildDem_getWorkitemSizeTiles(long jarg1, BuildDem jarg1_);
  public final static native void delete_BuildDem(long jarg1);
  public final static native long new_BuildDenseCloud();
  public final static native void BuildDenseCloud_setKeepDepth(long jarg1, BuildDenseCloud jarg1_, boolean jarg2);
  public final static native boolean BuildDenseCloud_getKeepDepth(long jarg1, BuildDenseCloud jarg1_);
  public final static native void BuildDenseCloud_setMaxNeighbors(long jarg1, BuildDenseCloud jarg1_, int jarg2);
  public final static native int BuildDenseCloud_getMaxNeighbors(long jarg1, BuildDenseCloud jarg1_);
  public final static native void BuildDenseCloud_setMaxWorkgroupSize(long jarg1, BuildDenseCloud jarg1_, int jarg2);
  public final static native int BuildDenseCloud_getMaxWorkgroupSize(long jarg1, BuildDenseCloud jarg1_);
  public final static native void BuildDenseCloud_setPointColors(long jarg1, BuildDenseCloud jarg1_, boolean jarg2);
  public final static native boolean BuildDenseCloud_getPointColors(long jarg1, BuildDenseCloud jarg1_);
  public final static native void BuildDenseCloud_setPointConfidence(long jarg1, BuildDenseCloud jarg1_, boolean jarg2);
  public final static native boolean BuildDenseCloud_getPointConfidence(long jarg1, BuildDenseCloud jarg1_);
  public final static native void BuildDenseCloud_setSubdivideTask(long jarg1, BuildDenseCloud jarg1_, boolean jarg2);
  public final static native boolean BuildDenseCloud_getSubdivideTask(long jarg1, BuildDenseCloud jarg1_);
  public final static native void BuildDenseCloud_setWorkitemSizeCameras(long jarg1, BuildDenseCloud jarg1_, int jarg2);
  public final static native int BuildDenseCloud_getWorkitemSizeCameras(long jarg1, BuildDenseCloud jarg1_);
  public final static native void delete_BuildDenseCloud(long jarg1);
  public final static native long new_BuildDepthMaps();
  public final static native void BuildDepthMaps_setCameras(long jarg1, BuildDepthMaps jarg1_, int[] jarg2);
  public final static native int[] BuildDepthMaps_getCameras(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setDownscale(long jarg1, BuildDepthMaps jarg1_, int jarg2);
  public final static native int BuildDepthMaps_getDownscale(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setFilterMode(long jarg1, BuildDepthMaps jarg1_, int jarg2);
  public final static native int BuildDepthMaps_getFilterMode(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setMaxNeighbors(long jarg1, BuildDepthMaps jarg1_, int jarg2);
  public final static native int BuildDepthMaps_getMaxNeighbors(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setMaxWorkgroupSize(long jarg1, BuildDepthMaps jarg1_, int jarg2);
  public final static native int BuildDepthMaps_getMaxWorkgroupSize(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setReuseDepth(long jarg1, BuildDepthMaps jarg1_, boolean jarg2);
  public final static native boolean BuildDepthMaps_getReuseDepth(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setSubdivideTask(long jarg1, BuildDepthMaps jarg1_, boolean jarg2);
  public final static native boolean BuildDepthMaps_getSubdivideTask(long jarg1, BuildDepthMaps jarg1_);
  public final static native void BuildDepthMaps_setWorkitemSizeCameras(long jarg1, BuildDepthMaps jarg1_, int jarg2);
  public final static native int BuildDepthMaps_getWorkitemSizeCameras(long jarg1, BuildDepthMaps jarg1_);
  public final static native void delete_BuildDepthMaps(long jarg1);
  public final static native long new_BuildModel();
  public final static native void BuildModel_setCameras(long jarg1, BuildModel jarg1_, int[] jarg2);
  public final static native int[] BuildModel_getCameras(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setClasses(long jarg1, BuildModel jarg1_, int[] jarg2);
  public final static native int[] BuildModel_getClasses(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setFaceCount(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getFaceCount(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setFaceCountCustom(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getFaceCountCustom(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setInterpolation(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getInterpolation(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setKeepDepth(long jarg1, BuildModel jarg1_, boolean jarg2);
  public final static native boolean BuildModel_getKeepDepth(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setMaxWorkgroupSize(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getMaxWorkgroupSize(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setSourceData(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getSourceData(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setSubdivideTask(long jarg1, BuildModel jarg1_, boolean jarg2);
  public final static native boolean BuildModel_getSubdivideTask(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setSurfaceType(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getSurfaceType(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setTrimmingRadius(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getTrimmingRadius(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setVertexColors(long jarg1, BuildModel jarg1_, boolean jarg2);
  public final static native boolean BuildModel_getVertexColors(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setVertexConfidence(long jarg1, BuildModel jarg1_, boolean jarg2);
  public final static native boolean BuildModel_getVertexConfidence(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setVolumetricMasks(long jarg1, BuildModel jarg1_, boolean jarg2);
  public final static native boolean BuildModel_getVolumetricMasks(long jarg1, BuildModel jarg1_);
  public final static native void BuildModel_setWorkitemSizeCameras(long jarg1, BuildModel jarg1_, int jarg2);
  public final static native int BuildModel_getWorkitemSizeCameras(long jarg1, BuildModel jarg1_);
  public final static native void delete_BuildModel(long jarg1);
  public final static native long new_BuildOrthomosaic();
  public final static native void BuildOrthomosaic_setBlendingMode(long jarg1, BuildOrthomosaic jarg1_, int jarg2);
  public final static native int BuildOrthomosaic_getBlendingMode(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setCullFaces(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getCullFaces(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setFillHoles(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getFillHoles(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setFlipX(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getFlipX(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setFlipY(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getFlipY(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setFlipZ(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getFlipZ(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setGhostingFilter(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getGhostingFilter(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setMaxWorkgroupSize(long jarg1, BuildOrthomosaic jarg1_, int jarg2);
  public final static native int BuildOrthomosaic_getMaxWorkgroupSize(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setProjection(long jarg1, BuildOrthomosaic jarg1_, long jarg2, OrthoProjection jarg2_);
  public final static native long BuildOrthomosaic_getProjection(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setRefineSeamlines(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getRefineSeamlines(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setRegion(long jarg1, BuildOrthomosaic jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long BuildOrthomosaic_getRegion(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setResolution(long jarg1, BuildOrthomosaic jarg1_, double jarg2);
  public final static native double BuildOrthomosaic_getResolution(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setResolutionX(long jarg1, BuildOrthomosaic jarg1_, double jarg2);
  public final static native double BuildOrthomosaic_getResolutionX(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setResolutionY(long jarg1, BuildOrthomosaic jarg1_, double jarg2);
  public final static native double BuildOrthomosaic_getResolutionY(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setSubdivideTask(long jarg1, BuildOrthomosaic jarg1_, boolean jarg2);
  public final static native boolean BuildOrthomosaic_getSubdivideTask(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setSurfaceData(long jarg1, BuildOrthomosaic jarg1_, int jarg2);
  public final static native int BuildOrthomosaic_getSurfaceData(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setWorkitemSizeCameras(long jarg1, BuildOrthomosaic jarg1_, int jarg2);
  public final static native int BuildOrthomosaic_getWorkitemSizeCameras(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void BuildOrthomosaic_setWorkitemSizeTiles(long jarg1, BuildOrthomosaic jarg1_, int jarg2);
  public final static native int BuildOrthomosaic_getWorkitemSizeTiles(long jarg1, BuildOrthomosaic jarg1_);
  public final static native void delete_BuildOrthomosaic(long jarg1);
  public final static native long new_BuildSeamlines();
  public final static native void BuildSeamlines_setEpsilon(long jarg1, BuildSeamlines jarg1_, double jarg2);
  public final static native double BuildSeamlines_getEpsilon(long jarg1, BuildSeamlines jarg1_);
  public final static native void delete_BuildSeamlines(long jarg1);
  public final static native long new_BuildTexture();
  public final static native void BuildTexture_setBlendingMode(long jarg1, BuildTexture jarg1_, int jarg2);
  public final static native int BuildTexture_getBlendingMode(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setCameras(long jarg1, BuildTexture jarg1_, int[] jarg2);
  public final static native int[] BuildTexture_getCameras(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setFillHoles(long jarg1, BuildTexture jarg1_, boolean jarg2);
  public final static native boolean BuildTexture_getFillHoles(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setGhostingFilter(long jarg1, BuildTexture jarg1_, boolean jarg2);
  public final static native boolean BuildTexture_getGhostingFilter(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setSourceModel(long jarg1, BuildTexture jarg1_, int jarg2);
  public final static native int BuildTexture_getSourceModel(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setTextureSize(long jarg1, BuildTexture jarg1_, int jarg2);
  public final static native int BuildTexture_getTextureSize(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setTextureType(long jarg1, BuildTexture jarg1_, int jarg2);
  public final static native int BuildTexture_getTextureType(long jarg1, BuildTexture jarg1_);
  public final static native void BuildTexture_setTransferTexture(long jarg1, BuildTexture jarg1_, boolean jarg2);
  public final static native boolean BuildTexture_getTransferTexture(long jarg1, BuildTexture jarg1_);
  public final static native void delete_BuildTexture(long jarg1);
  public final static native long new_BuildTiledModel();
  public final static native void BuildTiledModel_setClasses(long jarg1, BuildTiledModel jarg1_, int[] jarg2);
  public final static native int[] BuildTiledModel_getClasses(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setFaceCount(long jarg1, BuildTiledModel jarg1_, int jarg2);
  public final static native int BuildTiledModel_getFaceCount(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setGhostingFilter(long jarg1, BuildTiledModel jarg1_, boolean jarg2);
  public final static native boolean BuildTiledModel_getGhostingFilter(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setKeepDepth(long jarg1, BuildTiledModel jarg1_, boolean jarg2);
  public final static native boolean BuildTiledModel_getKeepDepth(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setMaxWorkgroupSize(long jarg1, BuildTiledModel jarg1_, int jarg2);
  public final static native int BuildTiledModel_getMaxWorkgroupSize(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setPixelSize(long jarg1, BuildTiledModel jarg1_, double jarg2);
  public final static native double BuildTiledModel_getPixelSize(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setSourceData(long jarg1, BuildTiledModel jarg1_, int jarg2);
  public final static native int BuildTiledModel_getSourceData(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setSubdivideTask(long jarg1, BuildTiledModel jarg1_, boolean jarg2);
  public final static native boolean BuildTiledModel_getSubdivideTask(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setTileSize(long jarg1, BuildTiledModel jarg1_, int jarg2);
  public final static native int BuildTiledModel_getTileSize(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setTransferTexture(long jarg1, BuildTiledModel jarg1_, boolean jarg2);
  public final static native boolean BuildTiledModel_getTransferTexture(long jarg1, BuildTiledModel jarg1_);
  public final static native void BuildTiledModel_setWorkitemSizeCameras(long jarg1, BuildTiledModel jarg1_, int jarg2);
  public final static native int BuildTiledModel_getWorkitemSizeCameras(long jarg1, BuildTiledModel jarg1_);
  public final static native void delete_BuildTiledModel(long jarg1);
  public final static native long new_BuildUV();
  public final static native void BuildUV_setCamera(long jarg1, BuildUV jarg1_, int jarg2);
  public final static native int BuildUV_getCamera(long jarg1, BuildUV jarg1_);
  public final static native void BuildUV_setMappingMode(long jarg1, BuildUV jarg1_, int jarg2);
  public final static native int BuildUV_getMappingMode(long jarg1, BuildUV jarg1_);
  public final static native void BuildUV_setPageCount(long jarg1, BuildUV jarg1_, int jarg2);
  public final static native int BuildUV_getPageCount(long jarg1, BuildUV jarg1_);
  public final static native void BuildUV_setTextureSize(long jarg1, BuildUV jarg1_, int jarg2);
  public final static native int BuildUV_getTextureSize(long jarg1, BuildUV jarg1_);
  public final static native void delete_BuildUV(long jarg1);
  public final static native long new_CalibrateColors();
  public final static native void CalibrateColors_setCameras(long jarg1, CalibrateColors jarg1_, int[] jarg2);
  public final static native int[] CalibrateColors_getCameras(long jarg1, CalibrateColors jarg1_);
  public final static native void CalibrateColors_setSourceData(long jarg1, CalibrateColors jarg1_, int jarg2);
  public final static native int CalibrateColors_getSourceData(long jarg1, CalibrateColors jarg1_);
  public final static native void CalibrateColors_setWhiteBalance(long jarg1, CalibrateColors jarg1_, boolean jarg2);
  public final static native boolean CalibrateColors_getWhiteBalance(long jarg1, CalibrateColors jarg1_);
  public final static native void delete_CalibrateColors(long jarg1);
  public final static native long new_CalibrateLens();
  public final static native void CalibrateLens_setBorder(long jarg1, CalibrateLens jarg1_, int jarg2);
  public final static native int CalibrateLens_getBorder(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitB1(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitB1(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitB2(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitB2(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitCxcy(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitCxcy(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitF(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitF(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitK1(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitK1(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitK2(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitK2(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitK3(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitK3(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitK4(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitK4(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitP1(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitP1(long jarg1, CalibrateLens jarg1_);
  public final static native void CalibrateLens_setFitP2(long jarg1, CalibrateLens jarg1_, boolean jarg2);
  public final static native boolean CalibrateLens_getFitP2(long jarg1, CalibrateLens jarg1_);
  public final static native void delete_CalibrateLens(long jarg1);
  public final static native long new_CalibrateReflectance();
  public final static native void CalibrateReflectance_setUseReflectancePanels(long jarg1, CalibrateReflectance jarg1_, boolean jarg2);
  public final static native boolean CalibrateReflectance_getUseReflectancePanels(long jarg1, CalibrateReflectance jarg1_);
  public final static native void CalibrateReflectance_setUseSunSensor(long jarg1, CalibrateReflectance jarg1_, boolean jarg2);
  public final static native boolean CalibrateReflectance_getUseSunSensor(long jarg1, CalibrateReflectance jarg1_);
  public final static native void delete_CalibrateReflectance(long jarg1);
  public final static native long new_ClassifyGroundPoints();
  public final static native void ClassifyGroundPoints_setCellSize(long jarg1, ClassifyGroundPoints jarg1_, double jarg2);
  public final static native double ClassifyGroundPoints_getCellSize(long jarg1, ClassifyGroundPoints jarg1_);
  public final static native void ClassifyGroundPoints_setMaxAngle(long jarg1, ClassifyGroundPoints jarg1_, double jarg2);
  public final static native double ClassifyGroundPoints_getMaxAngle(long jarg1, ClassifyGroundPoints jarg1_);
  public final static native void ClassifyGroundPoints_setMaxDistance(long jarg1, ClassifyGroundPoints jarg1_, double jarg2);
  public final static native double ClassifyGroundPoints_getMaxDistance(long jarg1, ClassifyGroundPoints jarg1_);
  public final static native void ClassifyGroundPoints_setSourceClass(long jarg1, ClassifyGroundPoints jarg1_, int jarg2);
  public final static native int ClassifyGroundPoints_getSourceClass(long jarg1, ClassifyGroundPoints jarg1_);
  public final static native void delete_ClassifyGroundPoints(long jarg1);
  public final static native long new_ClassifyPoints();
  public final static native void ClassifyPoints_setConfidence(long jarg1, ClassifyPoints jarg1_, double jarg2);
  public final static native double ClassifyPoints_getConfidence(long jarg1, ClassifyPoints jarg1_);
  public final static native void ClassifyPoints_setSourceClass(long jarg1, ClassifyPoints jarg1_, int jarg2);
  public final static native int ClassifyPoints_getSourceClass(long jarg1, ClassifyPoints jarg1_);
  public final static native void ClassifyPoints_setSubdivideTask(long jarg1, ClassifyPoints jarg1_, boolean jarg2);
  public final static native boolean ClassifyPoints_getSubdivideTask(long jarg1, ClassifyPoints jarg1_);
  public final static native void ClassifyPoints_setTargetClasses(long jarg1, ClassifyPoints jarg1_, int[] jarg2);
  public final static native int[] ClassifyPoints_getTargetClasses(long jarg1, ClassifyPoints jarg1_);
  public final static native void delete_ClassifyPoints(long jarg1);
  public final static native long new_CloseHoles();
  public final static native void CloseHoles_setLevel(long jarg1, CloseHoles jarg1_, int jarg2);
  public final static native int CloseHoles_getLevel(long jarg1, CloseHoles jarg1_);
  public final static native void delete_CloseHoles(long jarg1);
  public final static native long new_ColorizeDenseCloud();
  public final static native void ColorizeDenseCloud_setSourceData(long jarg1, ColorizeDenseCloud jarg1_, int jarg2);
  public final static native int ColorizeDenseCloud_getSourceData(long jarg1, ColorizeDenseCloud jarg1_);
  public final static native void delete_ColorizeDenseCloud(long jarg1);
  public final static native long new_ColorizeModel();
  public final static native void ColorizeModel_setSourceData(long jarg1, ColorizeModel jarg1_, int jarg2);
  public final static native int ColorizeModel_getSourceData(long jarg1, ColorizeModel jarg1_);
  public final static native void delete_ColorizeModel(long jarg1);
  public final static native long new_CompactDenseCloud();
  public final static native void delete_CompactDenseCloud(long jarg1);
  public final static native long new_ConvertImages();
  public final static native void ConvertImages_setCameras(long jarg1, ConvertImages jarg1_, int[] jarg2);
  public final static native int[] ConvertImages_getCameras(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setColorCorrection(long jarg1, ConvertImages jarg1_, boolean jarg2);
  public final static native boolean ConvertImages_getColorCorrection(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setFixPixelAspect(long jarg1, ConvertImages jarg1_, boolean jarg2);
  public final static native boolean ConvertImages_getFixPixelAspect(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setFixPrincipalPoint(long jarg1, ConvertImages jarg1_, boolean jarg2);
  public final static native boolean ConvertImages_getFixPrincipalPoint(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setImageCompression(long jarg1, ConvertImages jarg1_, long jarg2, ImageCompression jarg2_);
  public final static native long ConvertImages_getImageCompression(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setPath(long jarg1, ConvertImages jarg1_, String jarg2);
  public final static native String ConvertImages_getPath(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setRemoveDistortions(long jarg1, ConvertImages jarg1_, boolean jarg2);
  public final static native boolean ConvertImages_getRemoveDistortions(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setUpdateGpsTags(long jarg1, ConvertImages jarg1_, boolean jarg2);
  public final static native boolean ConvertImages_getUpdateGpsTags(long jarg1, ConvertImages jarg1_);
  public final static native void ConvertImages_setUseInitialCalibration(long jarg1, ConvertImages jarg1_, boolean jarg2);
  public final static native boolean ConvertImages_getUseInitialCalibration(long jarg1, ConvertImages jarg1_);
  public final static native void delete_ConvertImages(long jarg1);
  public final static native long new_DecimateModel();
  public final static native void DecimateModel_setApplyToSelection(long jarg1, DecimateModel jarg1_, boolean jarg2);
  public final static native boolean DecimateModel_getApplyToSelection(long jarg1, DecimateModel jarg1_);
  public final static native void DecimateModel_setAsset(long jarg1, DecimateModel jarg1_, int jarg2);
  public final static native int DecimateModel_getAsset(long jarg1, DecimateModel jarg1_);
  public final static native void DecimateModel_setFaceCount(long jarg1, DecimateModel jarg1_, int jarg2);
  public final static native int DecimateModel_getFaceCount(long jarg1, DecimateModel jarg1_);
  public final static native void delete_DecimateModel(long jarg1);
  public final static native long new_DetectFiducials();
  public final static native void DetectFiducials_setCameras(long jarg1, DetectFiducials jarg1_, int[] jarg2);
  public final static native int[] DetectFiducials_getCameras(long jarg1, DetectFiducials jarg1_);
  public final static native void DetectFiducials_setFrames(long jarg1, DetectFiducials jarg1_, int[] jarg2);
  public final static native int[] DetectFiducials_getFrames(long jarg1, DetectFiducials jarg1_);
  public final static native void DetectFiducials_setGenerateMasks(long jarg1, DetectFiducials jarg1_, boolean jarg2);
  public final static native boolean DetectFiducials_getGenerateMasks(long jarg1, DetectFiducials jarg1_);
  public final static native void delete_DetectFiducials(long jarg1);
  public final static native long new_DetectMarkers();
  public final static native void DetectMarkers_setCameras(long jarg1, DetectMarkers jarg1_, int[] jarg2);
  public final static native int[] DetectMarkers_getCameras(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setFilterMask(long jarg1, DetectMarkers jarg1_, boolean jarg2);
  public final static native boolean DetectMarkers_getFilterMask(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setFrames(long jarg1, DetectMarkers jarg1_, int[] jarg2);
  public final static native int[] DetectMarkers_getFrames(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setInverted(long jarg1, DetectMarkers jarg1_, boolean jarg2);
  public final static native boolean DetectMarkers_getInverted(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setMaximumResidual(long jarg1, DetectMarkers jarg1_, double jarg2);
  public final static native double DetectMarkers_getMaximumResidual(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setMinimumDist(long jarg1, DetectMarkers jarg1_, int jarg2);
  public final static native int DetectMarkers_getMinimumDist(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setMinimumSize(long jarg1, DetectMarkers jarg1_, int jarg2);
  public final static native int DetectMarkers_getMinimumSize(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setNoparity(long jarg1, DetectMarkers jarg1_, boolean jarg2);
  public final static native boolean DetectMarkers_getNoparity(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setTargetType(long jarg1, DetectMarkers jarg1_, int jarg2);
  public final static native int DetectMarkers_getTargetType(long jarg1, DetectMarkers jarg1_);
  public final static native void DetectMarkers_setTolerance(long jarg1, DetectMarkers jarg1_, int jarg2);
  public final static native int DetectMarkers_getTolerance(long jarg1, DetectMarkers jarg1_);
  public final static native void delete_DetectMarkers(long jarg1);
  public final static native long new_DuplicateChunk();
  public final static native void DuplicateChunk_setChunk(long jarg1, DuplicateChunk jarg1_, int jarg2);
  public final static native int DuplicateChunk_getChunk(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyDenseClouds(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyDenseClouds(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyDepthMaps(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyDepthMaps(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyElevations(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyElevations(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyKeypoints(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyKeypoints(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyModels(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyModels(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyOrthomosaics(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyOrthomosaics(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setCopyTiledModels(long jarg1, DuplicateChunk jarg1_, boolean jarg2);
  public final static native boolean DuplicateChunk_getCopyTiledModels(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setFrames(long jarg1, DuplicateChunk jarg1_, int[] jarg2);
  public final static native int[] DuplicateChunk_getFrames(long jarg1, DuplicateChunk jarg1_);
  public final static native void DuplicateChunk_setLabel(long jarg1, DuplicateChunk jarg1_, String jarg2);
  public final static native String DuplicateChunk_getLabel(long jarg1, DuplicateChunk jarg1_);
  public final static native void delete_DuplicateChunk(long jarg1);
  public final static native long new_ExportCameras();
  public final static native void ExportCameras_setBinary(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getBinary(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoPathGeoin(long jarg1, ExportCameras jarg1_, String jarg2);
  public final static native String ExportCameras_getBingoPathGeoin(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoPathGps(long jarg1, ExportCameras jarg1_, String jarg2);
  public final static native String ExportCameras_getBingoPathGps(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoPathImage(long jarg1, ExportCameras jarg1_, String jarg2);
  public final static native String ExportCameras_getBingoPathImage(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoPathItera(long jarg1, ExportCameras jarg1_, String jarg2);
  public final static native String ExportCameras_getBingoPathItera(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoSaveGeoin(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getBingoSaveGeoin(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoSaveGps(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getBingoSaveGps(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoSaveImage(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getBingoSaveImage(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBingoSaveItera(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getBingoSaveItera(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBundlerPathList(long jarg1, ExportCameras jarg1_, String jarg2);
  public final static native String ExportCameras_getBundlerPathList(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setBundlerSaveList(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getBundlerSaveList(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setChanRotationOrder(long jarg1, ExportCameras jarg1_, int jarg2);
  public final static native int ExportCameras_getChanRotationOrder(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setCRS(long jarg1, ExportCameras jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ExportCameras_getCRS(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setFormat(long jarg1, ExportCameras jarg1_, int jarg2);
  public final static native int ExportCameras_getFormat(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setImageOrientation(long jarg1, ExportCameras jarg1_, int jarg2);
  public final static native int ExportCameras_getImageOrientation(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setPath(long jarg1, ExportCameras jarg1_, String jarg2);
  public final static native String ExportCameras_getPath(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setSaveInvalidMatches(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getSaveInvalidMatches(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setSaveMarkers(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getSaveMarkers(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setSavePoints(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getSavePoints(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setUseInitialCalibration(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getUseInitialCalibration(long jarg1, ExportCameras jarg1_);
  public final static native void ExportCameras_setUseLabels(long jarg1, ExportCameras jarg1_, boolean jarg2);
  public final static native boolean ExportCameras_getUseLabels(long jarg1, ExportCameras jarg1_);
  public final static native void delete_ExportCameras(long jarg1);
  public final static native long new_ExportDepth();
  public final static native void ExportDepth_setCameras(long jarg1, ExportDepth jarg1_, int[] jarg2);
  public final static native int[] ExportDepth_getCameras(long jarg1, ExportDepth jarg1_);
  public final static native void ExportDepth_setExportDepth(long jarg1, ExportDepth jarg1_, boolean jarg2);
  public final static native boolean ExportDepth_getExportDepth(long jarg1, ExportDepth jarg1_);
  public final static native void ExportDepth_setExportDiffuse(long jarg1, ExportDepth jarg1_, boolean jarg2);
  public final static native boolean ExportDepth_getExportDiffuse(long jarg1, ExportDepth jarg1_);
  public final static native void ExportDepth_setExportNormals(long jarg1, ExportDepth jarg1_, boolean jarg2);
  public final static native boolean ExportDepth_getExportNormals(long jarg1, ExportDepth jarg1_);
  public final static native void ExportDepth_setPathDepth(long jarg1, ExportDepth jarg1_, String jarg2);
  public final static native String ExportDepth_getPathDepth(long jarg1, ExportDepth jarg1_);
  public final static native void ExportDepth_setPathDiffuse(long jarg1, ExportDepth jarg1_, String jarg2);
  public final static native String ExportDepth_getPathDiffuse(long jarg1, ExportDepth jarg1_);
  public final static native void ExportDepth_setPathNormals(long jarg1, ExportDepth jarg1_, String jarg2);
  public final static native String ExportDepth_getPathNormals(long jarg1, ExportDepth jarg1_);
  public final static native void delete_ExportDepth(long jarg1);
  public final static native long new_ExportMarkers();
  public final static native void ExportMarkers_setBinary(long jarg1, ExportMarkers jarg1_, boolean jarg2);
  public final static native boolean ExportMarkers_getBinary(long jarg1, ExportMarkers jarg1_);
  public final static native void ExportMarkers_setCRS(long jarg1, ExportMarkers jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ExportMarkers_getCRS(long jarg1, ExportMarkers jarg1_);
  public final static native void ExportMarkers_setPath(long jarg1, ExportMarkers jarg1_, String jarg2);
  public final static native String ExportMarkers_getPath(long jarg1, ExportMarkers jarg1_);
  public final static native void delete_ExportMarkers(long jarg1);
  public final static native long new_ExportMasks();
  public final static native void ExportMasks_setCameras(long jarg1, ExportMasks jarg1_, int[] jarg2);
  public final static native int[] ExportMasks_getCameras(long jarg1, ExportMasks jarg1_);
  public final static native void ExportMasks_setPath(long jarg1, ExportMasks jarg1_, String jarg2);
  public final static native String ExportMasks_getPath(long jarg1, ExportMasks jarg1_);
  public final static native void delete_ExportMasks(long jarg1);
  public final static native long new_ExportModel();
  public final static native void ExportModel_setBinary(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getBinary(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setClipToBoundary(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getClipToBoundary(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setColorsRgb8Bit(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getColorsRgb8Bit(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setComment(long jarg1, ExportModel jarg1_, String jarg2);
  public final static native String ExportModel_getComment(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setCRS(long jarg1, ExportModel jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ExportModel_getCRS(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setEmbedTexture(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getEmbedTexture(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setFormat(long jarg1, ExportModel jarg1_, int jarg2);
  public final static native int ExportModel_getFormat(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setPath(long jarg1, ExportModel jarg1_, String jarg2);
  public final static native String ExportModel_getPath(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setPrecision(long jarg1, ExportModel jarg1_, int jarg2);
  public final static native int ExportModel_getPrecision(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setRasterTransform(long jarg1, ExportModel jarg1_, int jarg2);
  public final static native int ExportModel_getRasterTransform(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveAlpha(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveAlpha(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveCameras(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveCameras(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveColors(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveColors(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveComment(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveComment(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveConfidence(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveConfidence(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveMarkers(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveMarkers(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveNormals(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveNormals(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveTexture(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveTexture(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveUdim(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveUdim(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setSaveUv(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getSaveUv(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setShift(long jarg1, ExportModel jarg1_, long jarg2, Vector3d jarg2_);
  public final static native long ExportModel_getShift(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setStripExtensions(long jarg1, ExportModel jarg1_, boolean jarg2);
  public final static native boolean ExportModel_getStripExtensions(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setTextureFormat(long jarg1, ExportModel jarg1_, int jarg2);
  public final static native int ExportModel_getTextureFormat(long jarg1, ExportModel jarg1_);
  public final static native void ExportModel_setViewpoint(long jarg1, ExportModel jarg1_, long jarg2, Viewpoint jarg2_);
  public final static native long ExportModel_getViewpoint(long jarg1, ExportModel jarg1_);
  public final static native void delete_ExportModel(long jarg1);
  public final static native long new_ExportOrthophotos();
  public final static native void ExportOrthophotos_setCameras(long jarg1, ExportOrthophotos jarg1_, int[] jarg2);
  public final static native int[] ExportOrthophotos_getCameras(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setImageCompression(long jarg1, ExportOrthophotos jarg1_, long jarg2, ImageCompression jarg2_);
  public final static native long ExportOrthophotos_getImageCompression(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setNorthUp(long jarg1, ExportOrthophotos jarg1_, boolean jarg2);
  public final static native boolean ExportOrthophotos_getNorthUp(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setPath(long jarg1, ExportOrthophotos jarg1_, String jarg2);
  public final static native String ExportOrthophotos_getPath(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setProjection(long jarg1, ExportOrthophotos jarg1_, long jarg2, OrthoProjection jarg2_);
  public final static native long ExportOrthophotos_getProjection(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setRasterTransform(long jarg1, ExportOrthophotos jarg1_, int jarg2);
  public final static native int ExportOrthophotos_getRasterTransform(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setRegion(long jarg1, ExportOrthophotos jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long ExportOrthophotos_getRegion(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setResolution(long jarg1, ExportOrthophotos jarg1_, double jarg2);
  public final static native double ExportOrthophotos_getResolution(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setResolutionX(long jarg1, ExportOrthophotos jarg1_, double jarg2);
  public final static native double ExportOrthophotos_getResolutionX(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setResolutionY(long jarg1, ExportOrthophotos jarg1_, double jarg2);
  public final static native double ExportOrthophotos_getResolutionY(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setSaveAlpha(long jarg1, ExportOrthophotos jarg1_, boolean jarg2);
  public final static native boolean ExportOrthophotos_getSaveAlpha(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setSaveKml(long jarg1, ExportOrthophotos jarg1_, boolean jarg2);
  public final static native boolean ExportOrthophotos_getSaveKml(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setSaveWorld(long jarg1, ExportOrthophotos jarg1_, boolean jarg2);
  public final static native boolean ExportOrthophotos_getSaveWorld(long jarg1, ExportOrthophotos jarg1_);
  public final static native void ExportOrthophotos_setWhiteBackground(long jarg1, ExportOrthophotos jarg1_, boolean jarg2);
  public final static native boolean ExportOrthophotos_getWhiteBackground(long jarg1, ExportOrthophotos jarg1_);
  public final static native void delete_ExportOrthophotos(long jarg1);
  public final static native long new_ExportPanorama();
  public final static native void ExportPanorama_setCameraGroups(long jarg1, ExportPanorama jarg1_, int[] jarg2);
  public final static native int[] ExportPanorama_getCameraGroups(long jarg1, ExportPanorama jarg1_);
  public final static native void ExportPanorama_setHeight(long jarg1, ExportPanorama jarg1_, int jarg2);
  public final static native int ExportPanorama_getHeight(long jarg1, ExportPanorama jarg1_);
  public final static native void ExportPanorama_setImageCompression(long jarg1, ExportPanorama jarg1_, long jarg2, ImageCompression jarg2_);
  public final static native long ExportPanorama_getImageCompression(long jarg1, ExportPanorama jarg1_);
  public final static native void ExportPanorama_setPath(long jarg1, ExportPanorama jarg1_, String jarg2);
  public final static native String ExportPanorama_getPath(long jarg1, ExportPanorama jarg1_);
  public final static native void ExportPanorama_setRegion(long jarg1, ExportPanorama jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long ExportPanorama_getRegion(long jarg1, ExportPanorama jarg1_);
  public final static native void ExportPanorama_setRotation(long jarg1, ExportPanorama jarg1_, long jarg2, Matrix3x3d jarg2_);
  public final static native long ExportPanorama_getRotation(long jarg1, ExportPanorama jarg1_);
  public final static native void ExportPanorama_setWidth(long jarg1, ExportPanorama jarg1_, int jarg2);
  public final static native int ExportPanorama_getWidth(long jarg1, ExportPanorama jarg1_);
  public final static native void delete_ExportPanorama(long jarg1);
  public final static native long new_ExportPoints();
  public final static native void ExportPoints_setBinary(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getBinary(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setBlockHeight(long jarg1, ExportPoints jarg1_, double jarg2);
  public final static native double ExportPoints_getBlockHeight(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setBlockWidth(long jarg1, ExportPoints jarg1_, double jarg2);
  public final static native double ExportPoints_getBlockWidth(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setClasses(long jarg1, ExportPoints jarg1_, int[] jarg2);
  public final static native int[] ExportPoints_getClasses(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setClipToBoundary(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getClipToBoundary(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setColorsRgb8Bit(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getColorsRgb8Bit(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setComment(long jarg1, ExportPoints jarg1_, String jarg2);
  public final static native String ExportPoints_getComment(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setCRS(long jarg1, ExportPoints jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ExportPoints_getCRS(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setFormat(long jarg1, ExportPoints jarg1_, int jarg2);
  public final static native int ExportPoints_getFormat(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setImageFormat(long jarg1, ExportPoints jarg1_, int jarg2);
  public final static native int ExportPoints_getImageFormat(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setPath(long jarg1, ExportPoints jarg1_, String jarg2);
  public final static native String ExportPoints_getPath(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setRasterTransform(long jarg1, ExportPoints jarg1_, int jarg2);
  public final static native int ExportPoints_getRasterTransform(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setRegion(long jarg1, ExportPoints jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long ExportPoints_getRegion(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSaveClasses(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSaveClasses(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSaveColors(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSaveColors(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSaveComment(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSaveComment(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSaveConfidence(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSaveConfidence(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSaveImages(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSaveImages(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSaveNormals(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSaveNormals(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setShift(long jarg1, ExportPoints jarg1_, long jarg2, Vector3d jarg2_);
  public final static native long ExportPoints_getShift(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSourceData(long jarg1, ExportPoints jarg1_, int jarg2);
  public final static native int ExportPoints_getSourceData(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSplitInBlocks(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSplitInBlocks(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setSubdivideTask(long jarg1, ExportPoints jarg1_, boolean jarg2);
  public final static native boolean ExportPoints_getSubdivideTask(long jarg1, ExportPoints jarg1_);
  public final static native void ExportPoints_setViewpoint(long jarg1, ExportPoints jarg1_, long jarg2, Viewpoint jarg2_);
  public final static native long ExportPoints_getViewpoint(long jarg1, ExportPoints jarg1_);
  public final static native void delete_ExportPoints(long jarg1);
  public final static native long new_ExportRaster();
  public final static native void ExportRaster_setBlockHeight(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getBlockHeight(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setBlockWidth(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getBlockWidth(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setClipToBoundary(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getClipToBoundary(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setDescription(long jarg1, ExportRaster jarg1_, String jarg2);
  public final static native String ExportRaster_getDescription(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setFormat(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getFormat(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setHeight(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getHeight(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setImageCompression(long jarg1, ExportRaster jarg1_, long jarg2, ImageCompression jarg2_);
  public final static native long ExportRaster_getImageCompression(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setImageDescription(long jarg1, ExportRaster jarg1_, String jarg2);
  public final static native String ExportRaster_getImageDescription(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setImageFormat(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getImageFormat(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setMaxZoomLevel(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getMaxZoomLevel(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setMinZoomLevel(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getMinZoomLevel(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setNetworkLinks(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getNetworkLinks(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setNodataValue(long jarg1, ExportRaster jarg1_, double jarg2);
  public final static native double ExportRaster_getNodataValue(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setNorthUp(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getNorthUp(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setPath(long jarg1, ExportRaster jarg1_, String jarg2);
  public final static native String ExportRaster_getPath(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setProjection(long jarg1, ExportRaster jarg1_, long jarg2, OrthoProjection jarg2_);
  public final static native long ExportRaster_getProjection(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setRasterTransform(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getRasterTransform(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setRegion(long jarg1, ExportRaster jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long ExportRaster_getRegion(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setResolution(long jarg1, ExportRaster jarg1_, double jarg2);
  public final static native double ExportRaster_getResolution(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setResolutionX(long jarg1, ExportRaster jarg1_, double jarg2);
  public final static native double ExportRaster_getResolutionX(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setResolutionY(long jarg1, ExportRaster jarg1_, double jarg2);
  public final static native double ExportRaster_getResolutionY(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setSaveAlpha(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getSaveAlpha(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setSaveKml(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getSaveKml(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setSaveScheme(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getSaveScheme(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setSaveWorld(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getSaveWorld(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setSourceData(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getSourceData(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setSplitInBlocks(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getSplitInBlocks(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setTileHeight(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getTileHeight(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setTileWidth(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getTileWidth(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setTitle(long jarg1, ExportRaster jarg1_, String jarg2);
  public final static native String ExportRaster_getTitle(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setWhiteBackground(long jarg1, ExportRaster jarg1_, boolean jarg2);
  public final static native boolean ExportRaster_getWhiteBackground(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setWidth(long jarg1, ExportRaster jarg1_, int jarg2);
  public final static native int ExportRaster_getWidth(long jarg1, ExportRaster jarg1_);
  public final static native void ExportRaster_setWorldTransform(long jarg1, ExportRaster jarg1_, long jarg2, Matrix2x3d jarg2_);
  public final static native long ExportRaster_getWorldTransform(long jarg1, ExportRaster jarg1_);
  public final static native void delete_ExportRaster(long jarg1);
  public final static native long new_ExportReference();
  public final static native void ExportReference_setColumns(long jarg1, ExportReference jarg1_, String jarg2);
  public final static native String ExportReference_getColumns(long jarg1, ExportReference jarg1_);
  public final static native void ExportReference_setDelimiter(long jarg1, ExportReference jarg1_, String jarg2);
  public final static native String ExportReference_getDelimiter(long jarg1, ExportReference jarg1_);
  public final static native void ExportReference_setFormat(long jarg1, ExportReference jarg1_, int jarg2);
  public final static native int ExportReference_getFormat(long jarg1, ExportReference jarg1_);
  public final static native void ExportReference_setItems(long jarg1, ExportReference jarg1_, int jarg2);
  public final static native int ExportReference_getItems(long jarg1, ExportReference jarg1_);
  public final static native void ExportReference_setPath(long jarg1, ExportReference jarg1_, String jarg2);
  public final static native String ExportReference_getPath(long jarg1, ExportReference jarg1_);
  public final static native void ExportReference_setPrecision(long jarg1, ExportReference jarg1_, int jarg2);
  public final static native int ExportReference_getPrecision(long jarg1, ExportReference jarg1_);
  public final static native void delete_ExportReference(long jarg1);
  public final static native long new_ExportReport();
  public final static native void ExportReport_setDescription(long jarg1, ExportReport jarg1_, String jarg2);
  public final static native String ExportReport_getDescription(long jarg1, ExportReport jarg1_);
  public final static native void ExportReport_setPageNumbers(long jarg1, ExportReport jarg1_, boolean jarg2);
  public final static native boolean ExportReport_getPageNumbers(long jarg1, ExportReport jarg1_);
  public final static native void ExportReport_setPath(long jarg1, ExportReport jarg1_, String jarg2);
  public final static native String ExportReport_getPath(long jarg1, ExportReport jarg1_);
  public final static native void ExportReport_setTitle(long jarg1, ExportReport jarg1_, String jarg2);
  public final static native String ExportReport_getTitle(long jarg1, ExportReport jarg1_);
  public final static native void ExportReport_setUserSettings(long jarg1, ExportReport jarg1_, long[] jarg2);
  public final static native long[] ExportReport_getUserSettings(long jarg1, ExportReport jarg1_);
  public final static native void delete_ExportReport(long jarg1);
  public final static native long new_ExportShapes();
  public final static native void ExportShapes_setCRS(long jarg1, ExportShapes jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ExportShapes_getCRS(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setFormat(long jarg1, ExportShapes jarg1_, int jarg2);
  public final static native int ExportShapes_getFormat(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setGroups(long jarg1, ExportShapes jarg1_, int[] jarg2);
  public final static native int[] ExportShapes_getGroups(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setPath(long jarg1, ExportShapes jarg1_, String jarg2);
  public final static native String ExportShapes_getPath(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setPolygonsAsPolylines(long jarg1, ExportShapes jarg1_, boolean jarg2);
  public final static native boolean ExportShapes_getPolygonsAsPolylines(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setSaveAttributes(long jarg1, ExportShapes jarg1_, boolean jarg2);
  public final static native boolean ExportShapes_getSaveAttributes(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setSaveLabels(long jarg1, ExportShapes jarg1_, boolean jarg2);
  public final static native boolean ExportShapes_getSaveLabels(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setSavePoints(long jarg1, ExportShapes jarg1_, boolean jarg2);
  public final static native boolean ExportShapes_getSavePoints(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setSavePolygons(long jarg1, ExportShapes jarg1_, boolean jarg2);
  public final static native boolean ExportShapes_getSavePolygons(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setSavePolylines(long jarg1, ExportShapes jarg1_, boolean jarg2);
  public final static native boolean ExportShapes_getSavePolylines(long jarg1, ExportShapes jarg1_);
  public final static native void ExportShapes_setShift(long jarg1, ExportShapes jarg1_, long jarg2, Vector3d jarg2_);
  public final static native long ExportShapes_getShift(long jarg1, ExportShapes jarg1_);
  public final static native void delete_ExportShapes(long jarg1);
  public final static native long new_ExportTexture();
  public final static native void ExportTexture_setPath(long jarg1, ExportTexture jarg1_, String jarg2);
  public final static native String ExportTexture_getPath(long jarg1, ExportTexture jarg1_);
  public final static native void ExportTexture_setSaveAlpha(long jarg1, ExportTexture jarg1_, boolean jarg2);
  public final static native boolean ExportTexture_getSaveAlpha(long jarg1, ExportTexture jarg1_);
  public final static native void ExportTexture_setTextureType(long jarg1, ExportTexture jarg1_, int jarg2);
  public final static native int ExportTexture_getTextureType(long jarg1, ExportTexture jarg1_);
  public final static native void delete_ExportTexture(long jarg1);
  public final static native long new_ExportTiledModel();
  public final static native void ExportTiledModel_setClipToBoundary(long jarg1, ExportTiledModel jarg1_, boolean jarg2);
  public final static native boolean ExportTiledModel_getClipToBoundary(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setCRS(long jarg1, ExportTiledModel jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ExportTiledModel_getCRS(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setFormat(long jarg1, ExportTiledModel jarg1_, int jarg2);
  public final static native int ExportTiledModel_getFormat(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setImageCompression(long jarg1, ExportTiledModel jarg1_, long jarg2, ImageCompression jarg2_);
  public final static native long ExportTiledModel_getImageCompression(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setModelFormat(long jarg1, ExportTiledModel jarg1_, int jarg2);
  public final static native int ExportTiledModel_getModelFormat(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setPath(long jarg1, ExportTiledModel jarg1_, String jarg2);
  public final static native String ExportTiledModel_getPath(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setRasterTransform(long jarg1, ExportTiledModel jarg1_, int jarg2);
  public final static native int ExportTiledModel_getRasterTransform(long jarg1, ExportTiledModel jarg1_);
  public final static native void ExportTiledModel_setTextureFormat(long jarg1, ExportTiledModel jarg1_, int jarg2);
  public final static native int ExportTiledModel_getTextureFormat(long jarg1, ExportTiledModel jarg1_);
  public final static native void delete_ExportTiledModel(long jarg1);
  public final static native long new_FilterDenseCloud();
  public final static native void FilterDenseCloud_setAsset(long jarg1, FilterDenseCloud jarg1_, int jarg2);
  public final static native int FilterDenseCloud_getAsset(long jarg1, FilterDenseCloud jarg1_);
  public final static native void FilterDenseCloud_setPointSpacing(long jarg1, FilterDenseCloud jarg1_, double jarg2);
  public final static native double FilterDenseCloud_getPointSpacing(long jarg1, FilterDenseCloud jarg1_);
  public final static native void delete_FilterDenseCloud(long jarg1);
  public final static native long new_GenerateMasks();
  public final static native void GenerateMasks_setBlurThreshold(long jarg1, GenerateMasks jarg1_, double jarg2);
  public final static native double GenerateMasks_getBlurThreshold(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setCameras(long jarg1, GenerateMasks jarg1_, int[] jarg2);
  public final static native int[] GenerateMasks_getCameras(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setFixCoverage(long jarg1, GenerateMasks jarg1_, boolean jarg2);
  public final static native boolean GenerateMasks_getFixCoverage(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setMaskDefocus(long jarg1, GenerateMasks jarg1_, boolean jarg2);
  public final static native boolean GenerateMasks_getMaskDefocus(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setMaskOperation(long jarg1, GenerateMasks jarg1_, int jarg2);
  public final static native int GenerateMasks_getMaskOperation(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setMaskingMode(long jarg1, GenerateMasks jarg1_, int jarg2);
  public final static native int GenerateMasks_getMaskingMode(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setPath(long jarg1, GenerateMasks jarg1_, String jarg2);
  public final static native String GenerateMasks_getPath(long jarg1, GenerateMasks jarg1_);
  public final static native void GenerateMasks_setTolerance(long jarg1, GenerateMasks jarg1_, int jarg2);
  public final static native int GenerateMasks_getTolerance(long jarg1, GenerateMasks jarg1_);
  public final static native void delete_GenerateMasks(long jarg1);
  public final static native long new_ImportCameras();
  public final static native void ImportCameras_setCRS(long jarg1, ImportCameras jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ImportCameras_getCRS(long jarg1, ImportCameras jarg1_);
  public final static native void ImportCameras_setFormat(long jarg1, ImportCameras jarg1_, int jarg2);
  public final static native int ImportCameras_getFormat(long jarg1, ImportCameras jarg1_);
  public final static native void ImportCameras_setImageList(long jarg1, ImportCameras jarg1_, String jarg2);
  public final static native String ImportCameras_getImageList(long jarg1, ImportCameras jarg1_);
  public final static native void ImportCameras_setImageOrientation(long jarg1, ImportCameras jarg1_, int jarg2);
  public final static native int ImportCameras_getImageOrientation(long jarg1, ImportCameras jarg1_);
  public final static native void ImportCameras_setLoadImageList(long jarg1, ImportCameras jarg1_, boolean jarg2);
  public final static native boolean ImportCameras_getLoadImageList(long jarg1, ImportCameras jarg1_);
  public final static native void ImportCameras_setPath(long jarg1, ImportCameras jarg1_, String jarg2);
  public final static native String ImportCameras_getPath(long jarg1, ImportCameras jarg1_);
  public final static native void delete_ImportCameras(long jarg1);
  public final static native long new_ImportMarkers();
  public final static native void ImportMarkers_setPath(long jarg1, ImportMarkers jarg1_, String jarg2);
  public final static native String ImportMarkers_getPath(long jarg1, ImportMarkers jarg1_);
  public final static native void delete_ImportMarkers(long jarg1);
  public final static native long new_ImportModel();
  public final static native void ImportModel_setCRS(long jarg1, ImportModel jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ImportModel_getCRS(long jarg1, ImportModel jarg1_);
  public final static native void ImportModel_setFormat(long jarg1, ImportModel jarg1_, int jarg2);
  public final static native int ImportModel_getFormat(long jarg1, ImportModel jarg1_);
  public final static native void ImportModel_setPath(long jarg1, ImportModel jarg1_, String jarg2);
  public final static native String ImportModel_getPath(long jarg1, ImportModel jarg1_);
  public final static native void ImportModel_setShift(long jarg1, ImportModel jarg1_, long jarg2, Vector3d jarg2_);
  public final static native long ImportModel_getShift(long jarg1, ImportModel jarg1_);
  public final static native void delete_ImportModel(long jarg1);
  public final static native long new_ImportPoints();
  public final static native void ImportPoints_setCalculateNormals(long jarg1, ImportPoints jarg1_, boolean jarg2);
  public final static native boolean ImportPoints_getCalculateNormals(long jarg1, ImportPoints jarg1_);
  public final static native void ImportPoints_setCRS(long jarg1, ImportPoints jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ImportPoints_getCRS(long jarg1, ImportPoints jarg1_);
  public final static native void ImportPoints_setFormat(long jarg1, ImportPoints jarg1_, int jarg2);
  public final static native int ImportPoints_getFormat(long jarg1, ImportPoints jarg1_);
  public final static native void ImportPoints_setPath(long jarg1, ImportPoints jarg1_, String jarg2);
  public final static native String ImportPoints_getPath(long jarg1, ImportPoints jarg1_);
  public final static native void ImportPoints_setShift(long jarg1, ImportPoints jarg1_, long jarg2, Vector3d jarg2_);
  public final static native long ImportPoints_getShift(long jarg1, ImportPoints jarg1_);
  public final static native void delete_ImportPoints(long jarg1);
  public final static native long new_ImportRaster();
  public final static native void ImportRaster_setCRS(long jarg1, ImportRaster jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ImportRaster_getCRS(long jarg1, ImportRaster jarg1_);
  public final static native void ImportRaster_setHasNodataValue(long jarg1, ImportRaster jarg1_, boolean jarg2);
  public final static native boolean ImportRaster_getHasNodataValue(long jarg1, ImportRaster jarg1_);
  public final static native void ImportRaster_setNodataValue(long jarg1, ImportRaster jarg1_, double jarg2);
  public final static native double ImportRaster_getNodataValue(long jarg1, ImportRaster jarg1_);
  public final static native void ImportRaster_setPath(long jarg1, ImportRaster jarg1_, String jarg2);
  public final static native String ImportRaster_getPath(long jarg1, ImportRaster jarg1_);
  public final static native void ImportRaster_setRasterType(long jarg1, ImportRaster jarg1_, int jarg2);
  public final static native int ImportRaster_getRasterType(long jarg1, ImportRaster jarg1_);
  public final static native void delete_ImportRaster(long jarg1);
  public final static native long new_ImportReference();
  public final static native void ImportReference_setColumns(long jarg1, ImportReference jarg1_, String jarg2);
  public final static native String ImportReference_getColumns(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setCreateMarkers(long jarg1, ImportReference jarg1_, boolean jarg2);
  public final static native boolean ImportReference_getCreateMarkers(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setCRS(long jarg1, ImportReference jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ImportReference_getCRS(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setDelimiter(long jarg1, ImportReference jarg1_, String jarg2);
  public final static native String ImportReference_getDelimiter(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setFormat(long jarg1, ImportReference jarg1_, int jarg2);
  public final static native int ImportReference_getFormat(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setGroupDelimiters(long jarg1, ImportReference jarg1_, boolean jarg2);
  public final static native boolean ImportReference_getGroupDelimiters(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setIgnoreLabels(long jarg1, ImportReference jarg1_, boolean jarg2);
  public final static native boolean ImportReference_getIgnoreLabels(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setItems(long jarg1, ImportReference jarg1_, int jarg2);
  public final static native int ImportReference_getItems(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setPath(long jarg1, ImportReference jarg1_, String jarg2);
  public final static native String ImportReference_getPath(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setShutterLag(long jarg1, ImportReference jarg1_, double jarg2);
  public final static native double ImportReference_getShutterLag(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setSkipRows(long jarg1, ImportReference jarg1_, int jarg2);
  public final static native int ImportReference_getSkipRows(long jarg1, ImportReference jarg1_);
  public final static native void ImportReference_setThreshold(long jarg1, ImportReference jarg1_, double jarg2);
  public final static native double ImportReference_getThreshold(long jarg1, ImportReference jarg1_);
  public final static native void delete_ImportReference(long jarg1);
  public final static native long new_ImportShapes();
  public final static native void ImportShapes_setBoundaryType(long jarg1, ImportShapes jarg1_, int jarg2);
  public final static native int ImportShapes_getBoundaryType(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setColumns(long jarg1, ImportShapes jarg1_, String jarg2);
  public final static native String ImportShapes_getColumns(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setCRS(long jarg1, ImportShapes jarg1_, long jarg2, CoordinateSystem jarg2_);
  public final static native long ImportShapes_getCRS(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setDelimiter(long jarg1, ImportShapes jarg1_, String jarg2);
  public final static native String ImportShapes_getDelimiter(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setFormat(long jarg1, ImportShapes jarg1_, int jarg2);
  public final static native int ImportShapes_getFormat(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setGroupDelimiters(long jarg1, ImportShapes jarg1_, boolean jarg2);
  public final static native boolean ImportShapes_getGroupDelimiters(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setPath(long jarg1, ImportShapes jarg1_, String jarg2);
  public final static native String ImportShapes_getPath(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setReplace(long jarg1, ImportShapes jarg1_, boolean jarg2);
  public final static native boolean ImportShapes_getReplace(long jarg1, ImportShapes jarg1_);
  public final static native void ImportShapes_setSkipRows(long jarg1, ImportShapes jarg1_, int jarg2);
  public final static native int ImportShapes_getSkipRows(long jarg1, ImportShapes jarg1_);
  public final static native void delete_ImportShapes(long jarg1);
  public final static native long new_ImportTiledModel();
  public final static native void ImportTiledModel_setPath(long jarg1, ImportTiledModel jarg1_, String jarg2);
  public final static native String ImportTiledModel_getPath(long jarg1, ImportTiledModel jarg1_);
  public final static native void delete_ImportTiledModel(long jarg1);
  public final static native long new_InvertMasks();
  public final static native void InvertMasks_setCameras(long jarg1, InvertMasks jarg1_, int[] jarg2);
  public final static native int[] InvertMasks_getCameras(long jarg1, InvertMasks jarg1_);
  public final static native void delete_InvertMasks(long jarg1);
  public final static native long new_LoadProject();
  public final static native void LoadProject_setPath(long jarg1, LoadProject jarg1_, String jarg2);
  public final static native String LoadProject_getPath(long jarg1, LoadProject jarg1_);
  public final static native void LoadProject_setReadOnly(long jarg1, LoadProject jarg1_, boolean jarg2);
  public final static native boolean LoadProject_getReadOnly(long jarg1, LoadProject jarg1_);
  public final static native void delete_LoadProject(long jarg1);
  public final static native long new_MatchPhotos();
  public final static native void MatchPhotos_setCameras(long jarg1, MatchPhotos jarg1_, int[] jarg2);
  public final static native int[] MatchPhotos_getCameras(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setDownscale(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getDownscale(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setFilterMask(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getFilterMask(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setFilterStationaryPoints(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getFilterStationaryPoints(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setGenericPreselection(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getGenericPreselection(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setGuidedMatching(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getGuidedMatching(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setKeepKeypoints(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getKeepKeypoints(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setKeypointLimit(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getKeypointLimit(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setMaskTiepoints(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getMaskTiepoints(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setMaxWorkgroupSize(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getMaxWorkgroupSize(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setPairs(long jarg1, MatchPhotos jarg1_, long[] jarg2);
  public final static native long[] MatchPhotos_getPairs(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setReferencePreselection(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getReferencePreselection(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setReferencePreselectionMode(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getReferencePreselectionMode(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setResetMatches(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getResetMatches(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setSubdivideTask(long jarg1, MatchPhotos jarg1_, boolean jarg2);
  public final static native boolean MatchPhotos_getSubdivideTask(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setTiepointLimit(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getTiepointLimit(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setWorkitemSizeCameras(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getWorkitemSizeCameras(long jarg1, MatchPhotos jarg1_);
  public final static native void MatchPhotos_setWorkitemSizePairs(long jarg1, MatchPhotos jarg1_, int jarg2);
  public final static native int MatchPhotos_getWorkitemSizePairs(long jarg1, MatchPhotos jarg1_);
  public final static native void delete_MatchPhotos(long jarg1);
  public final static native long new_MergeAssets();
  public final static native void MergeAssets_setAssets(long jarg1, MergeAssets jarg1_, int[] jarg2);
  public final static native int[] MergeAssets_getAssets(long jarg1, MergeAssets jarg1_);
  public final static native void MergeAssets_setSourceData(long jarg1, MergeAssets jarg1_, int jarg2);
  public final static native int MergeAssets_getSourceData(long jarg1, MergeAssets jarg1_);
  public final static native void delete_MergeAssets(long jarg1);
  public final static native long new_MergeChunks();
  public final static native void MergeChunks_setChunks(long jarg1, MergeChunks jarg1_, int[] jarg2);
  public final static native int[] MergeChunks_getChunks(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeDenseClouds(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeDenseClouds(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeDepthMaps(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeDepthMaps(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeElevations(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeElevations(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeMarkers(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeMarkers(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeModels(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeModels(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeOrthomosaics(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeOrthomosaics(long jarg1, MergeChunks jarg1_);
  public final static native void MergeChunks_setMergeTiepoints(long jarg1, MergeChunks jarg1_, boolean jarg2);
  public final static native boolean MergeChunks_getMergeTiepoints(long jarg1, MergeChunks jarg1_);
  public final static native void delete_MergeChunks(long jarg1);
  public final static native long new_OptimizeCameras();
  public final static native void OptimizeCameras_setAdaptiveFitting(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getAdaptiveFitting(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitB1(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitB1(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitB2(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitB2(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitCorrections(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitCorrections(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitCx(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitCx(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitCy(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitCy(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitF(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitF(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitK1(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitK1(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitK2(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitK2(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitK3(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitK3(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitK4(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitK4(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitP1(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitP1(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setFitP2(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getFitP2(long jarg1, OptimizeCameras jarg1_);
  public final static native void OptimizeCameras_setTiepointCovariance(long jarg1, OptimizeCameras jarg1_, boolean jarg2);
  public final static native boolean OptimizeCameras_getTiepointCovariance(long jarg1, OptimizeCameras jarg1_);
  public final static native void delete_OptimizeCameras(long jarg1);
  public final static native long new_PlanMission();
  public final static native void PlanMission_setAttachViewpoints(long jarg1, PlanMission jarg1_, boolean jarg2);
  public final static native boolean PlanMission_getAttachViewpoints(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setCaptureDistance(long jarg1, PlanMission jarg1_, double jarg2);
  public final static native double PlanMission_getCaptureDistance(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setGroupAttachedViewpoints(long jarg1, PlanMission jarg1_, boolean jarg2);
  public final static native boolean PlanMission_getGroupAttachedViewpoints(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setHorizontalZigzags(long jarg1, PlanMission jarg1_, boolean jarg2);
  public final static native boolean PlanMission_getHorizontalZigzags(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setMaxPitch(long jarg1, PlanMission jarg1_, int jarg2);
  public final static native int PlanMission_getMaxPitch(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setMaxWaypoints(long jarg1, PlanMission jarg1_, int jarg2);
  public final static native int PlanMission_getMaxWaypoints(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setMinAltitude(long jarg1, PlanMission jarg1_, double jarg2);
  public final static native double PlanMission_getMinAltitude(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setMinPitch(long jarg1, PlanMission jarg1_, int jarg2);
  public final static native int PlanMission_getMinPitch(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setMinWaypointSpacing(long jarg1, PlanMission jarg1_, double jarg2);
  public final static native double PlanMission_getMinWaypointSpacing(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setOverlap(long jarg1, PlanMission jarg1_, int jarg2);
  public final static native int PlanMission_getOverlap(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setSafetyDistance(long jarg1, PlanMission jarg1_, double jarg2);
  public final static native double PlanMission_getSafetyDistance(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setSensor(long jarg1, PlanMission jarg1_, int jarg2);
  public final static native int PlanMission_getSensor(long jarg1, PlanMission jarg1_);
  public final static native void PlanMission_setUseSelection(long jarg1, PlanMission jarg1_, boolean jarg2);
  public final static native boolean PlanMission_getUseSelection(long jarg1, PlanMission jarg1_);
  public final static native void delete_PlanMission(long jarg1);
  public final static native long new_ReduceOverlap();
  public final static native void ReduceOverlap_setOverlap(long jarg1, ReduceOverlap jarg1_, int jarg2);
  public final static native int ReduceOverlap_getOverlap(long jarg1, ReduceOverlap jarg1_);
  public final static native void ReduceOverlap_setSensor(long jarg1, ReduceOverlap jarg1_, int jarg2);
  public final static native int ReduceOverlap_getSensor(long jarg1, ReduceOverlap jarg1_);
  public final static native void ReduceOverlap_setUseSelection(long jarg1, ReduceOverlap jarg1_, boolean jarg2);
  public final static native boolean ReduceOverlap_getUseSelection(long jarg1, ReduceOverlap jarg1_);
  public final static native void delete_ReduceOverlap(long jarg1);
  public final static native long new_RefineMesh();
  public final static native void RefineMesh_setCameras(long jarg1, RefineMesh jarg1_, int[] jarg2);
  public final static native int[] RefineMesh_getCameras(long jarg1, RefineMesh jarg1_);
  public final static native void RefineMesh_setDownscale(long jarg1, RefineMesh jarg1_, int jarg2);
  public final static native int RefineMesh_getDownscale(long jarg1, RefineMesh jarg1_);
  public final static native void RefineMesh_setIterations(long jarg1, RefineMesh jarg1_, int jarg2);
  public final static native int RefineMesh_getIterations(long jarg1, RefineMesh jarg1_);
  public final static native void RefineMesh_setSmoothness(long jarg1, RefineMesh jarg1_, double jarg2);
  public final static native double RefineMesh_getSmoothness(long jarg1, RefineMesh jarg1_);
  public final static native void delete_RefineMesh(long jarg1);
  public final static native long new_RemoveLighting();
  public final static native void RemoveLighting_setAmbientOcclusionMultiplier(long jarg1, RemoveLighting jarg1_, double jarg2);
  public final static native double RemoveLighting_getAmbientOcclusionMultiplier(long jarg1, RemoveLighting jarg1_);
  public final static native void RemoveLighting_setAmbientOcclusionPath(long jarg1, RemoveLighting jarg1_, String jarg2);
  public final static native String RemoveLighting_getAmbientOcclusionPath(long jarg1, RemoveLighting jarg1_);
  public final static native void RemoveLighting_setColorMode(long jarg1, RemoveLighting jarg1_, boolean jarg2);
  public final static native boolean RemoveLighting_getColorMode(long jarg1, RemoveLighting jarg1_);
  public final static native void RemoveLighting_setInternalBlur(long jarg1, RemoveLighting jarg1_, double jarg2);
  public final static native double RemoveLighting_getInternalBlur(long jarg1, RemoveLighting jarg1_);
  public final static native void RemoveLighting_setMeshNoiseSuppression(long jarg1, RemoveLighting jarg1_, double jarg2);
  public final static native double RemoveLighting_getMeshNoiseSuppression(long jarg1, RemoveLighting jarg1_);
  public final static native void delete_RemoveLighting(long jarg1);
  public final static native long new_ResetMasks();
  public final static native void ResetMasks_setCameras(long jarg1, ResetMasks jarg1_, int[] jarg2);
  public final static native int[] ResetMasks_getCameras(long jarg1, ResetMasks jarg1_);
  public final static native void delete_ResetMasks(long jarg1);
  public final static native long new_RunScript();
  public final static native void RunScript_setArgs(long jarg1, RunScript jarg1_, String jarg2);
  public final static native String RunScript_getArgs(long jarg1, RunScript jarg1_);
  public final static native void RunScript_setCode(long jarg1, RunScript jarg1_, String jarg2);
  public final static native String RunScript_getCode(long jarg1, RunScript jarg1_);
  public final static native void RunScript_setPath(long jarg1, RunScript jarg1_, String jarg2);
  public final static native String RunScript_getPath(long jarg1, RunScript jarg1_);
  public final static native void delete_RunScript(long jarg1);
  public final static native long new_SaveProject();
  public final static native void SaveProject_setAbsolutePaths(long jarg1, SaveProject jarg1_, boolean jarg2);
  public final static native boolean SaveProject_getAbsolutePaths(long jarg1, SaveProject jarg1_);
  public final static native void SaveProject_setChunks(long jarg1, SaveProject jarg1_, int[] jarg2);
  public final static native int[] SaveProject_getChunks(long jarg1, SaveProject jarg1_);
  public final static native void SaveProject_setCompression(long jarg1, SaveProject jarg1_, int jarg2);
  public final static native int SaveProject_getCompression(long jarg1, SaveProject jarg1_);
  public final static native void SaveProject_setPath(long jarg1, SaveProject jarg1_, String jarg2);
  public final static native String SaveProject_getPath(long jarg1, SaveProject jarg1_);
  public final static native void SaveProject_setVersion(long jarg1, SaveProject jarg1_, String jarg2);
  public final static native String SaveProject_getVersion(long jarg1, SaveProject jarg1_);
  public final static native void delete_SaveProject(long jarg1);
  public final static native long new_SmoothModel();
  public final static native void SmoothModel_setApplyToSelection(long jarg1, SmoothModel jarg1_, boolean jarg2);
  public final static native boolean SmoothModel_getApplyToSelection(long jarg1, SmoothModel jarg1_);
  public final static native void SmoothModel_setFixBorders(long jarg1, SmoothModel jarg1_, boolean jarg2);
  public final static native boolean SmoothModel_getFixBorders(long jarg1, SmoothModel jarg1_);
  public final static native void SmoothModel_setStrength(long jarg1, SmoothModel jarg1_, double jarg2);
  public final static native double SmoothModel_getStrength(long jarg1, SmoothModel jarg1_);
  public final static native void delete_SmoothModel(long jarg1);
  public final static native long new_TrackMarkers();
  public final static native void TrackMarkers_setFirstFrame(long jarg1, TrackMarkers jarg1_, int jarg2);
  public final static native int TrackMarkers_getFirstFrame(long jarg1, TrackMarkers jarg1_);
  public final static native void TrackMarkers_setLastFrame(long jarg1, TrackMarkers jarg1_, int jarg2);
  public final static native int TrackMarkers_getLastFrame(long jarg1, TrackMarkers jarg1_);
  public final static native void delete_TrackMarkers(long jarg1);
  public final static native long new_TransformRaster();
  public final static native void TransformRaster_setAsset(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getAsset(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setDataSource(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getDataSource(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setHeight(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getHeight(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setNodataValue(long jarg1, TransformRaster jarg1_, double jarg2);
  public final static native double TransformRaster_getNodataValue(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setNorthUp(long jarg1, TransformRaster jarg1_, boolean jarg2);
  public final static native boolean TransformRaster_getNorthUp(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setOperandAsset(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getOperandAsset(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setOperandChunk(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getOperandChunk(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setOperandFrame(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getOperandFrame(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setProjection(long jarg1, TransformRaster jarg1_, long jarg2, OrthoProjection jarg2_);
  public final static native long TransformRaster_getProjection(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setRegion(long jarg1, TransformRaster jarg1_, long jarg2, BBox2d jarg2_);
  public final static native long TransformRaster_getRegion(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setResolution(long jarg1, TransformRaster jarg1_, double jarg2);
  public final static native double TransformRaster_getResolution(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setResolutionX(long jarg1, TransformRaster jarg1_, double jarg2);
  public final static native double TransformRaster_getResolutionX(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setResolutionY(long jarg1, TransformRaster jarg1_, double jarg2);
  public final static native double TransformRaster_getResolutionY(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setSubtract(long jarg1, TransformRaster jarg1_, boolean jarg2);
  public final static native boolean TransformRaster_getSubtract(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setWidth(long jarg1, TransformRaster jarg1_, int jarg2);
  public final static native int TransformRaster_getWidth(long jarg1, TransformRaster jarg1_);
  public final static native void TransformRaster_setWorldTransform(long jarg1, TransformRaster jarg1_, long jarg2, Matrix2x3d jarg2_);
  public final static native long TransformRaster_getWorldTransform(long jarg1, TransformRaster jarg1_);
  public final static native void delete_TransformRaster(long jarg1);
  public final static native long new_TriangulatePoints();
  public final static native void TriangulatePoints_setMaxError(long jarg1, TriangulatePoints jarg1_, double jarg2);
  public final static native double TriangulatePoints_getMaxError(long jarg1, TriangulatePoints jarg1_);
  public final static native void TriangulatePoints_setMinImage(long jarg1, TriangulatePoints jarg1_, int jarg2);
  public final static native int TriangulatePoints_getMinImage(long jarg1, TriangulatePoints jarg1_);
  public final static native void delete_TriangulatePoints(long jarg1);
  public final static native long AddFrames_SWIGUpcast(long jarg1);
  public final static native long AddPhotos_SWIGUpcast(long jarg1);
  public final static native long AlignCameras_SWIGUpcast(long jarg1);
  public final static native long AlignChunks_SWIGUpcast(long jarg1);
  public final static native long AnalyzePhotos_SWIGUpcast(long jarg1);
  public final static native long BuildContours_SWIGUpcast(long jarg1);
  public final static native long BuildDem_SWIGUpcast(long jarg1);
  public final static native long BuildDenseCloud_SWIGUpcast(long jarg1);
  public final static native long BuildDepthMaps_SWIGUpcast(long jarg1);
  public final static native long BuildModel_SWIGUpcast(long jarg1);
  public final static native long BuildOrthomosaic_SWIGUpcast(long jarg1);
  public final static native long BuildSeamlines_SWIGUpcast(long jarg1);
  public final static native long BuildTexture_SWIGUpcast(long jarg1);
  public final static native long BuildTiledModel_SWIGUpcast(long jarg1);
  public final static native long BuildUV_SWIGUpcast(long jarg1);
  public final static native long CalibrateColors_SWIGUpcast(long jarg1);
  public final static native long CalibrateLens_SWIGUpcast(long jarg1);
  public final static native long CalibrateReflectance_SWIGUpcast(long jarg1);
  public final static native long ClassifyGroundPoints_SWIGUpcast(long jarg1);
  public final static native long ClassifyPoints_SWIGUpcast(long jarg1);
  public final static native long CloseHoles_SWIGUpcast(long jarg1);
  public final static native long ColorizeDenseCloud_SWIGUpcast(long jarg1);
  public final static native long ColorizeModel_SWIGUpcast(long jarg1);
  public final static native long CompactDenseCloud_SWIGUpcast(long jarg1);
  public final static native long ConvertImages_SWIGUpcast(long jarg1);
  public final static native long DecimateModel_SWIGUpcast(long jarg1);
  public final static native long DetectFiducials_SWIGUpcast(long jarg1);
  public final static native long DetectMarkers_SWIGUpcast(long jarg1);
  public final static native long DuplicateChunk_SWIGUpcast(long jarg1);
  public final static native long ExportCameras_SWIGUpcast(long jarg1);
  public final static native long ExportDepth_SWIGUpcast(long jarg1);
  public final static native long ExportMarkers_SWIGUpcast(long jarg1);
  public final static native long ExportMasks_SWIGUpcast(long jarg1);
  public final static native long ExportModel_SWIGUpcast(long jarg1);
  public final static native long ExportOrthophotos_SWIGUpcast(long jarg1);
  public final static native long ExportPanorama_SWIGUpcast(long jarg1);
  public final static native long ExportPoints_SWIGUpcast(long jarg1);
  public final static native long ExportRaster_SWIGUpcast(long jarg1);
  public final static native long ExportReference_SWIGUpcast(long jarg1);
  public final static native long ExportReport_SWIGUpcast(long jarg1);
  public final static native long ExportShapes_SWIGUpcast(long jarg1);
  public final static native long ExportTexture_SWIGUpcast(long jarg1);
  public final static native long ExportTiledModel_SWIGUpcast(long jarg1);
  public final static native long FilterDenseCloud_SWIGUpcast(long jarg1);
  public final static native long GenerateMasks_SWIGUpcast(long jarg1);
  public final static native long ImportCameras_SWIGUpcast(long jarg1);
  public final static native long ImportMarkers_SWIGUpcast(long jarg1);
  public final static native long ImportModel_SWIGUpcast(long jarg1);
  public final static native long ImportPoints_SWIGUpcast(long jarg1);
  public final static native long ImportRaster_SWIGUpcast(long jarg1);
  public final static native long ImportReference_SWIGUpcast(long jarg1);
  public final static native long ImportShapes_SWIGUpcast(long jarg1);
  public final static native long ImportTiledModel_SWIGUpcast(long jarg1);
  public final static native long InvertMasks_SWIGUpcast(long jarg1);
  public final static native long LoadProject_SWIGUpcast(long jarg1);
  public final static native long MatchPhotos_SWIGUpcast(long jarg1);
  public final static native long MergeAssets_SWIGUpcast(long jarg1);
  public final static native long MergeChunks_SWIGUpcast(long jarg1);
  public final static native long OptimizeCameras_SWIGUpcast(long jarg1);
  public final static native long PlanMission_SWIGUpcast(long jarg1);
  public final static native long ReduceOverlap_SWIGUpcast(long jarg1);
  public final static native long RefineMesh_SWIGUpcast(long jarg1);
  public final static native long RemoveLighting_SWIGUpcast(long jarg1);
  public final static native long ResetMasks_SWIGUpcast(long jarg1);
  public final static native long RunScript_SWIGUpcast(long jarg1);
  public final static native long SaveProject_SWIGUpcast(long jarg1);
  public final static native long SmoothModel_SWIGUpcast(long jarg1);
  public final static native long TrackMarkers_SWIGUpcast(long jarg1);
  public final static native long TransformRaster_SWIGUpcast(long jarg1);
  public final static native long TriangulatePoints_SWIGUpcast(long jarg1);
}
