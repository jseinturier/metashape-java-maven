/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape.tasks;

import com.agisoft.metashape.*;

/**
 * Task class containing processing parameters.
 */
public class PlanMission extends Task {
  private transient long swigCPtr;

  protected PlanMission(long cPtr, boolean cMemoryOwn) {
    super(TasksJNI.PlanMission_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PlanMission obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TasksJNI.delete_PlanMission(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public PlanMission() {
    this(TasksJNI.new_PlanMission(), true);
  }

  /**
   *  Generate additional viewpoints to increase coverage. Default: true
   */
  public void setAttachViewpoints(boolean value) {
    TasksJNI.PlanMission_setAttachViewpoints(swigCPtr, this, value);
  }

  /**
   *  Generate additional viewpoints to increase coverage. Default: true
   */
  public boolean getAttachViewpoints() {
    return TasksJNI.PlanMission_getAttachViewpoints(swigCPtr, this);
  }

  /**
   *  Image capture distance (m). Default: 20.0
   */
  public void setCaptureDistance(double value) {
    TasksJNI.PlanMission_setCaptureDistance(swigCPtr, this, value);
  }

  /**
   *  Image capture distance (m). Default: 20.0
   */
  public double getCaptureDistance() {
    return TasksJNI.PlanMission_getCaptureDistance(swigCPtr, this);
  }

  /**
   *  Ignore minimum waypoint spacing for additional viewpoints. Default: false
   */
  public void setGroupAttachedViewpoints(boolean value) {
    TasksJNI.PlanMission_setGroupAttachedViewpoints(swigCPtr, this, value);
  }

  /**
   *  Ignore minimum waypoint spacing for additional viewpoints. Default: false
   */
  public boolean getGroupAttachedViewpoints() {
    return TasksJNI.PlanMission_getGroupAttachedViewpoints(swigCPtr, this);
  }

  /**
   *  Cover surface with horizontal zigzags instead of vertical. Default: false
   */
  public void setHorizontalZigzags(boolean value) {
    TasksJNI.PlanMission_setHorizontalZigzags(swigCPtr, this, value);
  }

  /**
   *  Cover surface with horizontal zigzags instead of vertical. Default: false
   */
  public boolean getHorizontalZigzags() {
    return TasksJNI.PlanMission_getHorizontalZigzags(swigCPtr, this);
  }

  /**
   *  Maximum camera pitch angle. Default: 0
   */
  public void setMaxPitch(int value) {
    TasksJNI.PlanMission_setMaxPitch(swigCPtr, this, value);
  }

  /**
   *  Maximum camera pitch angle. Default: 0
   */
  public int getMaxPitch() {
    return TasksJNI.PlanMission_getMaxPitch(swigCPtr, this);
  }

  /**
   *  Maximum waypoints per flight. Default: 99
   */
  public void setMaxWaypoints(int value) {
    TasksJNI.PlanMission_setMaxWaypoints(swigCPtr, this, value);
  }

  /**
   *  Maximum waypoints per flight. Default: 99
   */
  public int getMaxWaypoints() {
    return TasksJNI.PlanMission_getMaxWaypoints(swigCPtr, this);
  }

  /**
   *  Minimum altitude (m). Default: 10.0
   */
  public void setMinAltitude(double value) {
    TasksJNI.PlanMission_setMinAltitude(swigCPtr, this, value);
  }

  /**
   *  Minimum altitude (m). Default: 10.0
   */
  public double getMinAltitude() {
    return TasksJNI.PlanMission_getMinAltitude(swigCPtr, this);
  }

  /**
   *  Minimum camera pitch angle. Default: -90
   */
  public void setMinPitch(int value) {
    TasksJNI.PlanMission_setMinPitch(swigCPtr, this, value);
  }

  /**
   *  Minimum camera pitch angle. Default: -90
   */
  public int getMinPitch() {
    return TasksJNI.PlanMission_getMinPitch(swigCPtr, this);
  }

  /**
   *  Minimum waypoint spacing (m). Default: 0.6
   */
  public void setMinWaypointSpacing(double value) {
    TasksJNI.PlanMission_setMinWaypointSpacing(swigCPtr, this, value);
  }

  /**
   *  Minimum waypoint spacing (m). Default: 0.6
   */
  public double getMinWaypointSpacing() {
    return TasksJNI.PlanMission_getMinWaypointSpacing(swigCPtr, this);
  }

  /**
   *  Overlap percent. Default: 65
   */
  public void setOverlap(int value) {
    TasksJNI.PlanMission_setOverlap(swigCPtr, this, value);
  }

  /**
   *  Overlap percent. Default: 65
   */
  public int getOverlap() {
    return TasksJNI.PlanMission_getOverlap(swigCPtr, this);
  }

  /**
   *  Safety distance (m). Default: 10.0
   */
  public void setSafetyDistance(double value) {
    TasksJNI.PlanMission_setSafetyDistance(swigCPtr, this, value);
  }

  /**
   *  Safety distance (m). Default: 10.0
   */
  public double getSafetyDistance() {
    return TasksJNI.PlanMission_getSafetyDistance(swigCPtr, this);
  }

  /**
   *  Sensor key. Default: -1
   */
  public void setSensor(int value) {
    TasksJNI.PlanMission_setSensor(swigCPtr, this, value);
  }

  /**
   *  Sensor key. Default: -1
   */
  public int getSensor() {
    return TasksJNI.PlanMission_getSensor(swigCPtr, this);
  }

  /**
   *  Focus on model selection. Default: false
   */
  public void setUseSelection(boolean value) {
    TasksJNI.PlanMission_setUseSelection(swigCPtr, this, value);
  }

  /**
   *  Focus on model selection. Default: false
   */
  public boolean getUseSelection() {
    return TasksJNI.PlanMission_getUseSelection(swigCPtr, this);
  }

}
