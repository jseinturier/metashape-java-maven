/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape;

/**
 * Polygonal model.
 */
public class Model {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public Model(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Model obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MetashapeJNI.delete_Model(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static long[] cArrayUnwrap(Model[] arrayWrapper) {
    long[] cArray = new long[arrayWrapper.length];
    for (int i=0; i<arrayWrapper.length; i++)
      cArray[i] = Model.getCPtr(arrayWrapper[i]);
    return cArray;
  }

  public static Model[] cArrayWrap(long[] cArray, boolean cMemoryOwn) {
    Model[] arrayWrapper = new Model[cArray.length];
    for (int i=0; i<cArray.length; i++)
      arrayWrapper[i] = new Model(cArray[i], cMemoryOwn);
    return arrayWrapper;
  }

  public Model() {
    this(MetashapeJNI.new_Model__SWIG_0(), true);
  }

  public Model(Model model) {
    this(MetashapeJNI.new_Model__SWIG_1(Model.getCPtr(model), model), true);
  }

  static public class Texture {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public Texture(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(Texture obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MetashapeJNI.delete_Model_Texture(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public static long[] cArrayUnwrap(Model.Texture[] arrayWrapper) {
      long[] cArray = new long[arrayWrapper.length];
      for (int i=0; i<arrayWrapper.length; i++)
        cArray[i] = Model.Texture.getCPtr(arrayWrapper[i]);
      return cArray;
    }
  
    public static Model.Texture[] cArrayWrap(long[] cArray, boolean cMemoryOwn) {
      Model.Texture[] arrayWrapper = new Model.Texture[cArray.length];
      for (int i=0; i<cArray.length; i++)
        arrayWrapper[i] = new Model.Texture(cArray[i], cMemoryOwn);
      return arrayWrapper;
    }
  
    /**
     *  Texture identifier.
     */
    public int getKey() {
      return MetashapeJNI.Model_Texture_getKey(swigCPtr, this);
    }
  
    /**
     *  Texture type.
     */
    public Model.TextureType getTextureType() {
      return Model.TextureType.class.getEnumConstants()[MetashapeJNI.Model_Texture_getTextureType(swigCPtr, this)];
    }
  
    /**
     *  Texture label.
     */
    public void setLabel(String label) {
      MetashapeJNI.Model_Texture_setLabel(swigCPtr, this, label);
    }
  
    /**
     *  Texture label.
     */
    public String getLabel() {
      return MetashapeJNI.Model_Texture_getLabel(swigCPtr, this);
    }
  
    /**
     *  Texture meta data.
     */
    public void setMeta(MetaData meta) {
      MetashapeJNI.Model_Texture_setMeta(swigCPtr, this, MetaData.getCPtr(meta), meta);
    }
  
    /**
     *  Texture meta data.
     */
    public MetaData getMeta() {
      return new MetaData(MetashapeJNI.Model_Texture_getMeta(swigCPtr, this), true);
    }
  
  }

  static public class Face {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public Face(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(Face obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MetashapeJNI.delete_Model_Face(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    /**
     *  Face visibility flag.
     */
    public void setHidden(boolean on) {
      MetashapeJNI.Model_Face_setHidden(swigCPtr, this, on);
    }
  
    /**
     *  Face visibility flag.
     */
    public boolean isHidden() {
      return MetashapeJNI.Model_Face_isHidden(swigCPtr, this);
    }
  
    /**
     *  Face selection flag.
     */
    public void setSelected(boolean on) {
      MetashapeJNI.Model_Face_setSelected(swigCPtr, this, on);
    }
  
    /**
     *  Face selection flag.
     */
    public boolean isSelected() {
      return MetashapeJNI.Model_Face_isSelected(swigCPtr, this);
    }
  
    /**
     *  Vertex indices.
     */
    public void setVertices(int[] ids) {
      MetashapeJNI.Model_Face_setVertices(swigCPtr, this, ids);
    }
  
    /**
     *  Vertex indices.
     */
    public int[] getVertices() { return MetashapeJNI.Model_Face_getVertices(swigCPtr, this); }
  
    public Face() {
      this(MetashapeJNI.new_Model_Face(), true);
    }
  
  }

  static public class Vertex {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public Vertex(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(Vertex obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MetashapeJNI.delete_Model_Vertex(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    /**
     *  Vertex coordinates.
     */
    public void setCoord(Vector3d coord) {
      MetashapeJNI.Model_Vertex_setCoord(swigCPtr, this, Vector3d.getCPtr(coord), coord);
    }
  
    /**
     *  Vertex coordinates.
     */
    public Vector3d getCoord() {
      return new Vector3d(MetashapeJNI.Model_Vertex_getCoord(swigCPtr, this), true);
    }
  
    /**
     *  Vertex confidence.
     */
    public void setConfidence(float confidence) {
      MetashapeJNI.Model_Vertex_setConfidence(swigCPtr, this, confidence);
    }
  
    /**
     *  Vertex confidence.
     */
    public float getConfidence() {
      return MetashapeJNI.Model_Vertex_getConfidence(swigCPtr, this);
    }
  
    public Vertex() {
      this(MetashapeJNI.new_Model_Vertex(), true);
    }
  
  }

  static public class TexFace {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public TexFace(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(TexFace obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MetashapeJNI.delete_Model_TexFace(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    /**
     *  Texture page index.
     */
    public void setTextureIndex(int index) {
      MetashapeJNI.Model_TexFace_setTextureIndex(swigCPtr, this, index);
    }
  
    /**
     *  Texture page index.
     */
    public int getTextureIndex() {
      return MetashapeJNI.Model_TexFace_getTextureIndex(swigCPtr, this);
    }
  
    /**
     *  Texture vertex indices.
     */
    public void setVertices(int[] ids) {
      MetashapeJNI.Model_TexFace_setVertices(swigCPtr, this, ids);
    }
  
    /**
     *  Texture vertex indices.
     */
    public int[] getVertices() { return MetashapeJNI.Model_TexFace_getVertices(swigCPtr, this); }
  
    public TexFace() {
      this(MetashapeJNI.new_Model_TexFace(), true);
    }
  
  }

  static public class TexVertex {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public TexVertex(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(TexVertex obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MetashapeJNI.delete_Model_TexVertex(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    /**
     *  Vertex texture coordinates.
     */
    public void setCoord(Vector2d coord) {
      MetashapeJNI.Model_TexVertex_setCoord(swigCPtr, this, Vector2d.getCPtr(coord), coord);
    }
  
    /**
     *  Vertex texture coordinates.
     */
    public Vector2d getCoord() {
      return new Vector2d(MetashapeJNI.Model_TexVertex_getCoord(swigCPtr, this), true);
    }
  
    public TexVertex() {
      this(MetashapeJNI.new_Model_TexVertex(), true);
    }
  
  }

  static public class Mesh {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public Mesh(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(Mesh obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MetashapeJNI.delete_Model_Mesh(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Mesh() {
      this(MetashapeJNI.new_Model_Mesh__SWIG_0(), true);
    }
  
    public Mesh(Model.Mesh mesh) {
      this(MetashapeJNI.new_Model_Mesh__SWIG_1(Model.Mesh.getCPtr(mesh), mesh), true);
    }
  
    /**
     *  Mesh face count.
     */
    public void setFaceCount(int count) {
      MetashapeJNI.Model_Mesh_setFaceCount(swigCPtr, this, count);
    }
  
    /**
     *  Mesh face count.
     */
    public int getFaceCount() {
      return MetashapeJNI.Model_Mesh_getFaceCount(swigCPtr, this);
    }
  
    /**
     *  Mesh vertex count.
     */
    public void setVertexCount(int count) {
      MetashapeJNI.Model_Mesh_setVertexCount(swigCPtr, this, count);
    }
  
    /**
     *  Mesh vertex count.
     */
    public int getVertexCount() {
      return MetashapeJNI.Model_Mesh_getVertexCount(swigCPtr, this);
    }
  
    /**
     *  Mesh face.
     */
    public void setFace(int index, Model.Face f) {
      MetashapeJNI.Model_Mesh_setFace(swigCPtr, this, index, Model.Face.getCPtr(f), f);
    }
  
    /**
     *  Mesh face.
     */
    public Model.Face getFace(int index) {
      return new Model.Face(MetashapeJNI.Model_Mesh_getFace(swigCPtr, this, index), true);
    }
  
    /**
     *  Mesh vertex.
     */
    public void setVertex(int index, Model.Vertex v) {
      MetashapeJNI.Model_Mesh_setVertex(swigCPtr, this, index, Model.Vertex.getCPtr(v), v);
    }
  
    /**
     *  Mesh vertex.
     */
    public Model.Vertex getVertex(int index) {
      return new Model.Vertex(MetashapeJNI.Model_Mesh_getVertex(swigCPtr, this, index), true);
    }
  
    /**
     *  Mesh vertex color.
     */
    public void setVertexColor(int index, Vector3uc color) {
      MetashapeJNI.Model_Mesh_setVertexColor(swigCPtr, this, index, Vector3uc.getCPtr(color), color);
    }
  
    /**
     *  Mesh vertex color.
     */
    public Vector3uc getVertexColor(int index) {
      return new Vector3uc(MetashapeJNI.Model_Mesh_getVertexColor(swigCPtr, this, index), true);
    }
  
  }

  /**
   *  Model identifier.
   */
  public int getKey() {
    return MetashapeJNI.Model_getKey(swigCPtr, this);
  }

  /**
   *  Chunk container.
   */
  public Chunk getChunk() {
    long ptr = MetashapeJNI.Model_getChunk(swigCPtr, this);
    if (ptr == 0)
        return null;
    return new Chunk(ptr, true);
  }

  /**
   *  Model label.
   */
  public void setLabel(String label) {
    MetashapeJNI.Model_setLabel(swigCPtr, this, label);
  }

  /**
   *  Model label.
   */
  public String getLabel() {
    return MetashapeJNI.Model_getLabel(swigCPtr, this);
  }

  /**
   *  List of textures in the model.
   */
  public Model.Texture[] getTextures() { return Model.Texture.cArrayWrap(MetashapeJNI.Model_getTextures(swigCPtr, this), true); }

  /**
   *  Active texture of a given type.
   */
  public Model.Texture getActiveTexture(Model.TextureType type) {
    long ptr = MetashapeJNI.Model_getActiveTexture(swigCPtr, this, type.ordinal());
    if (ptr == 0)
        return null;
    return new Model.Texture(ptr, true);
  }

  /**
   *  Model mesh.
   */
  public void setMesh(Model.Mesh mesh) {
    MetashapeJNI.Model_setMesh(swigCPtr, this, mesh == null ? 0 : Model.Mesh.getCPtr(mesh));
  }

  /**
   *  Model mesh.
   */
  public Model.Mesh getMesh() {
    long ptr = MetashapeJNI.Model_getMesh(swigCPtr, this);
    if (ptr == 0)
        return null;
    return new Model.Mesh(ptr, true);
  }

  /**
   *  Path to model file.
   */
  public String getPath() {
    return MetashapeJNI.Model_getPath(swigCPtr, this);
  }

  /**
   *  Model meta data.
   */
  public void setMeta(MetaData meta) {
    MetashapeJNI.Model_setMeta(swigCPtr, this, MetaData.getCPtr(meta), meta);
  }

  /**
   *  Model meta data.
   */
  public MetaData getMeta() {
    return new MetaData(MetashapeJNI.Model_getMeta(swigCPtr, this), true);
  }

  /**
   * Returns ray intersection with the model surface.<br>
   * @param origin Ray origin.<br>
   * @param target Point on the ray.<br>
   * @return Coordinates of the intersection point or null.
   */
  public Vector3d pickPoint(Vector3d origin, Vector3d target) {
    long ptr = MetashapeJNI.Model_pickPoint(swigCPtr, this, Vector3d.getCPtr(origin), origin, Vector3d.getCPtr(target), target);
    if (ptr == 0)
        return null;
    return new Vector3d(ptr, true);
  }

  /**
   * Generate model preview image.<br>
   * @param width Preview image width.<br>
   * @param height Preview image height.<br>
   * @param transform 4x4 viewpoint transformation matrix.<br>
   * @return Preview image.
   */
  public Image renderPreview(long width, long height, Matrix4x4d transform, Progress progress) {
    return new Image(MetashapeJNI.Model_renderPreview(swigCPtr, this, width, height, Matrix4x4d.getCPtr(transform), transform, progress), true);
  }

  public enum TextureType {
    DiffuseMap,
    NormalMap,
    OcclusionMap;
  }

}
