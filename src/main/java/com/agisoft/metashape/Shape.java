/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.agisoft.metashape;

public class Shape {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public Shape(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Shape obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MetashapeJNI.delete_Shape(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static long[] cArrayUnwrap(Shape[] arrayWrapper) {
    long[] cArray = new long[arrayWrapper.length];
    for (int i=0; i<arrayWrapper.length; i++)
      cArray[i] = Shape.getCPtr(arrayWrapper[i]);
    return cArray;
  }

  public static Shape[] cArrayWrap(long[] cArray, boolean cMemoryOwn) {
    Shape[] arrayWrapper = new Shape[cArray.length];
    for (int i=0; i<cArray.length; i++)
      arrayWrapper[i] = new Shape(cArray[i], cMemoryOwn);
    return arrayWrapper;
  }

  public Shape(Shape shape) {
    this(MetashapeJNI.new_Shape(Shape.getCPtr(shape), shape), true);
  }

  /**
   *  Shape identifier.
   */
  public int getKey() {
    return MetashapeJNI.Shape_getKey(swigCPtr, this);
  }

  /**
   *  Shape type.
   */
  public void setType(Shape.Type type) {
    MetashapeJNI.Shape_setType(swigCPtr, this, type.ordinal());
  }

  /**
   *  Shape type.
   */
  public Shape.Type getType() {
    return Shape.Type.class.getEnumConstants()[MetashapeJNI.Shape_getType(swigCPtr, this)];
  }

  /**
   *  Shape boundary type.
   */
  public void setBoundaryType(Shape.BoundaryType type) {
    MetashapeJNI.Shape_setBoundaryType(swigCPtr, this, type.ordinal());
  }

  /**
   *  Shape boundary type.
   */
  public Shape.BoundaryType getBoundaryType() {
    return Shape.BoundaryType.class.getEnumConstants()[MetashapeJNI.Shape_getBoundaryType(swigCPtr, this)];
  }

  /**
   *  Shape label.
   */
  public void setLabel(String label) {
    MetashapeJNI.Shape_setLabel(swigCPtr, this, label);
  }

  /**
   *  Shape label.
   */
  public String getLabel() {
    return MetashapeJNI.Shape_getLabel(swigCPtr, this);
  }

  /**
   *  Selects/deselects the shape.
   */
  public void setSelected(boolean state) {
    MetashapeJNI.Shape_setSelected(swigCPtr, this, state);
  }

  /**
   *  Selects/deselects the shape.
   */
  public boolean isSelected() {
    return MetashapeJNI.Shape_isSelected(swigCPtr, this);
  }

  /**
   *  Shape group.
   */
  public void setGroup(ShapeGroup group) {
    MetashapeJNI.Shape_setGroup(swigCPtr, this, ShapeGroup.getCPtr(group), group);
  }

  /**
   *  Shape group.
   */
  public ShapeGroup getGroup() {
    return new ShapeGroup(MetashapeJNI.Shape_getGroup(swigCPtr, this), true);
  }

  public void resize(long size) {
    MetashapeJNI.Shape_resize(swigCPtr, this, size);
  }

  public long getSize() {
    return MetashapeJNI.Shape_getSize(swigCPtr, this);
  }

  public void setVertex(long index, Vector3d vertex) {
    MetashapeJNI.Shape_setVertex(swigCPtr, this, index, Vector3d.getCPtr(vertex), vertex);
  }

  public Vector3d getVertex(long index) {
    return new Vector3d(MetashapeJNI.Shape_getVertex(swigCPtr, this, index), true);
  }

  /**
   *  Z enable flag.
   */
  public void setZEnabled(boolean enabled) {
    MetashapeJNI.Shape_setZEnabled(swigCPtr, this, enabled);
  }

  /**
   *  Z enable flag.
   */
  public boolean isZEnabled() {
    return MetashapeJNI.Shape_isZEnabled(swigCPtr, this);
  }

  public enum Type {
    TypePoint,
    TypePolyline,
    TypePolygon;
  }

  public enum BoundaryType {
    NoBoundary,
    InnerBoundary,
    OuterBoundary;
  }

}
